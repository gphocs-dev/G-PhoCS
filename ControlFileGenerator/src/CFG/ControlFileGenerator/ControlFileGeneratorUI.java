/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CFG.ControlFileGenerator;

import com.sun.glass.events.KeyEvent;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.Font;
import java.awt.List;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Tal
 */
public class ControlFileGeneratorUI extends javax.swing.JFrame {

    /**
     * Creates new form ControlFileGeneratorUI
     */
    public ControlFileGeneratorUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        locusMutRateButtonGroup = new javax.swing.ButtonGroup();
        findFinetunesButtonGroup = new javax.swing.ButtonGroup();
        jTextField1 = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel15 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        seqFileLabel = new javax.swing.JLabel();
        traceFileLabel = new javax.swing.JLabel();
        numLociLabel = new javax.swing.JLabel();
        burnInLabel = new javax.swing.JLabel();
        randomSeedLabel = new javax.swing.JLabel();
        seqFileField = new javax.swing.JTextField();
        traceFileField = new javax.swing.JTextField();
        numLociField = new javax.swing.JTextField();
        randomSeedField = new javax.swing.JTextField();
        burnInField = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        mcmcIterationsLabel = new javax.swing.JLabel();
        mcmcSampleSkipLabel = new javax.swing.JLabel();
        startMigLabel = new javax.swing.JLabel();
        iterationsPerLogLabel = new javax.swing.JLabel();
        logsPerLineLabel = new javax.swing.JLabel();
        mcmcIterationsField = new javax.swing.JTextField();
        mcmcSampleSkipField = new javax.swing.JTextField();
        startMigField = new javax.swing.JTextField();
        iterationsPerLogField = new javax.swing.JTextField();
        logsPerLineField = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        thauThetaPrintLabel = new javax.swing.JLabel();
        tauThetaAlphaLabel = new javax.swing.JLabel();
        tauThetaBetaLabel = new javax.swing.JLabel();
        tauThetaAlphaField = new javax.swing.JTextField();
        tauThetaBetaField = new javax.swing.JTextField();
        tauThetaPrintField = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        migRatePrintLabel = new javax.swing.JLabel();
        migRateAlphaLabel = new javax.swing.JLabel();
        migRateBetaLabel = new javax.swing.JLabel();
        migRateAlphaField = new javax.swing.JTextField();
        migRateBetaField = new javax.swing.JTextField();
        migRatePrintField = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        locusMutRateLabel = new javax.swing.JLabel();
        locusConstRadioButton = new javax.swing.JRadioButton();
        locusVarRadioButton = new javax.swing.JRadioButton();
        locusFixedRadioButton = new javax.swing.JRadioButton();
        chooseFixedFileButton = new javax.swing.JButton();
        chooseLocusMutRateFileField = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        finetuneCoalTimeLabel = new javax.swing.JLabel();
        finetuneMigTimeLabel = new javax.swing.JLabel();
        finetuneCoalTimeField = new javax.swing.JTextField();
        finetuneMigTimeField = new javax.swing.JTextField();
        findFinetunesLabel = new javax.swing.JLabel();
        findFinetunesFalseRadioButton = new javax.swing.JRadioButton();
        findFinetunesTrueRadioButton = new javax.swing.JRadioButton();
        findFinetunesNumStepLabel = new javax.swing.JLabel();
        findFinetunesNumStepField = new javax.swing.JTextField();
        findFinetunesSamplesPerStepLabel = new javax.swing.JLabel();
        findFinetunesSamplesPerStepField = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        finetuneLocusRateLabel = new javax.swing.JLabel();
        finetuneMixingLabel = new javax.swing.JLabel();
        finetuneLocusRateField = new javax.swing.JTextField();
        finetuneMixingField = new javax.swing.JTextField();
        finetuneTauLabel = new javax.swing.JLabel();
        finetuneTauField = new javax.swing.JTextField();
        finetuneThetaLabel = new javax.swing.JLabel();
        finetuneThetaField = new javax.swing.JTextField();
        finetuneMigRateLabel = new javax.swing.JLabel();
        finetuneMigRateField = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        mixingLable = new javax.swing.JLabel();
        noMixingCheckBox = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel13 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        treeLabel = new javax.swing.JLabel();
        treeField = new javax.swing.JTextField();
        generateTreeInputButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        expectedCurrentPOPsOutputTextArea = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        expectedAncestralPOPsOutputTextArea = new javax.swing.JTextArea();
        updateTauInitialsButton = new javax.swing.JButton();
        updateSamplesButton = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jPanel18 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jPanel21 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        expectedMigBandsOutputTextArea = new javax.swing.JTextArea();
        deleteMigBandsButton = new javax.swing.JButton();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        addNewMigBandButton = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        sourceMigBandComboBox = new javax.swing.JComboBox();
        targetMigBandComboBox = new javax.swing.JComboBox();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel11 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        chooseDestinationFolderButton = new javax.swing.JButton();
        controlFileDestinationLabel = new javax.swing.JLabel();
        destinationFolderField = new javax.swing.JTextField();
        generateFileButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        CFGLoadButton = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        jPanel17 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        openWebManualLabel = new javax.swing.JLabel();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jTabbedPane1.setMinimumSize(new java.awt.Dimension(100, 100));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(598, 885));

        jScrollPane3.setPreferredSize(new java.awt.Dimension(598, 659));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "General", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(51, 51, 255))); // NOI18N

        seqFileLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        seqFileLabel.setText("seq-file");
        seqFileLabel.setToolTipText("<html><p>Name of file containing sequence alignments for analysis</p>\n<p><b>Obligatory</b></p> ");
        seqFileLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                seqFileLabelMouseEntered(evt);
            }
        });

        traceFileLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        traceFileLabel.setText("trace-file");
        traceFileLabel.setToolTipText("<html><p>Name of file onto which trace will be written</p>\n<p><b>Optional,</b> default: “mcmc-trace.out”</p></html>");

        numLociLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        numLociLabel.setText("num-loci");
        numLociLabel.setToolTipText("<html><p>Number of Loci to read from sequence alignment file. Will read first N loci.</p>\n<p><b>Optional,</b> default: read all loci in file</p></html>");

        burnInLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        burnInLabel.setText("burn-in");
        burnInLabel.setToolTipText("<html><p>Number of MCMC iterations performed before tracing to output. It is recommended to run the MCMC with a pre-set burn-in of 0,</p><p>and to apply the actual burn-in only when post-processing the trace file (by ignoring the top part\nof the file).</p>\n<p><b>Optional,</b> default: 0</p></html>");

        randomSeedLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        randomSeedLabel.setText("random-seed");
        randomSeedLabel.setToolTipText("<html><p>Seed for random number generator used in G-PhoCS</p>\n<p><b>Optional,</b> default: use time stamp to generate seed</p></html>");

        seqFileField.setMaximumSize(new java.awt.Dimension(6, 20));
        seqFileField.setName(""); // NOI18N

        traceFileField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        traceFileField.setForeground(java.awt.Color.lightGray);
        traceFileField.setText("mcmc-trace.out");
        traceFileField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                traceFileFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                traceFileFieldFocusLost(evt);
            }
        });

        numLociField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        numLociField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numLociFieldKeyTyped(evt);
            }
        });

        randomSeedField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        burnInField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        burnInField.setForeground(java.awt.Color.lightGray);
        burnInField.setText("0");
        burnInField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                burnInFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                burnInFieldFocusLost(evt);
            }
        });
        burnInField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                burnInFieldKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(randomSeedLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(burnInLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(traceFileLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(seqFileLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(numLociLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(seqFileField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(traceFileField, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(numLociField, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(randomSeedField, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(burnInField, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(seqFileLabel)
                    .addComponent(seqFileField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(traceFileLabel)
                    .addComponent(traceFileField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(numLociLabel)
                    .addComponent(numLociField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(randomSeedLabel)
                    .addComponent(randomSeedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(burnInLabel)
                    .addComponent(burnInField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        mcmcIterationsLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        mcmcIterationsLabel.setText("mcmc-iterations");
        mcmcIterationsLabel.setToolTipText("<html><p>The total number of MCMC iterations, including burn-in</p> <p><b>Optional,</b> default: 300,000</p></html>");

        mcmcSampleSkipLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        mcmcSampleSkipLabel.setText("mcmc-sample-skip");
        mcmcSampleSkipLabel.setToolTipText("<html><p>Number of iterations between each two traced samples</p>\n<p><b>Optional,</b> default: 0 (means each sample is traced)</p></html>");

        startMigLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        startMigLabel.setText("start-mig");
        startMigLabel.setToolTipText("<html><p>Iteration at which migration starts being sampled (it is often useful to let the MCMC converge before introducing migration into the model</p>\n<p><b>Optional,</b> default: 0</p></html>");

        iterationsPerLogLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        iterationsPerLogLabel.setText("iterations-per-log");
        iterationsPerLogLabel.setToolTipText("<html><p>Number of MCMC iterations between each logging to stdout</p>\n<p><b>Optional,</b> default: 100</p></html>");

        logsPerLineLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        logsPerLineLabel.setText("logs-per-line");
        logsPerLineLabel.setToolTipText("<html><p>Number of log updates to write in one line to stdout</p>\n<p><b>Optional,</b> default: 100</p></html>");

        mcmcIterationsField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        mcmcIterationsField.setForeground(java.awt.Color.lightGray);
        mcmcIterationsField.setText("300000");
        mcmcIterationsField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mcmcIterationsFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                mcmcIterationsFieldFocusLost(evt);
            }
        });
        mcmcIterationsField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                mcmcIterationsFieldKeyTyped(evt);
            }
        });

        mcmcSampleSkipField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        mcmcSampleSkipField.setForeground(java.awt.Color.lightGray);
        mcmcSampleSkipField.setText("0");
        mcmcSampleSkipField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mcmcSampleSkipFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                mcmcSampleSkipFieldFocusLost(evt);
            }
        });
        mcmcSampleSkipField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                mcmcSampleSkipFieldKeyTyped(evt);
            }
        });

        startMigField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        startMigField.setForeground(java.awt.Color.lightGray);
        startMigField.setText("0");
        startMigField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                startMigFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                startMigFieldFocusLost(evt);
            }
        });
        startMigField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                startMigFieldKeyTyped(evt);
            }
        });

        iterationsPerLogField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        iterationsPerLogField.setForeground(java.awt.Color.lightGray);
        iterationsPerLogField.setText("100");
        iterationsPerLogField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                iterationsPerLogFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                iterationsPerLogFieldFocusLost(evt);
            }
        });
        iterationsPerLogField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                iterationsPerLogFieldKeyTyped(evt);
            }
        });

        logsPerLineField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        logsPerLineField.setForeground(java.awt.Color.lightGray);
        logsPerLineField.setText("100");
        logsPerLineField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                logsPerLineFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                logsPerLineFieldFocusLost(evt);
            }
        });
        logsPerLineField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                logsPerLineFieldKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(startMigLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                    .addComponent(iterationsPerLogLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, Short.MAX_VALUE)
                    .addComponent(mcmcIterationsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(logsPerLineLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mcmcSampleSkipLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(mcmcIterationsField, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                    .addComponent(mcmcSampleSkipField)
                    .addComponent(startMigField)
                    .addComponent(iterationsPerLogField)
                    .addComponent(logsPerLineField))
                .addContainerGap())
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {iterationsPerLogLabel, logsPerLineLabel, mcmcIterationsLabel, mcmcSampleSkipLabel, startMigLabel});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(mcmcIterationsLabel)
                    .addComponent(mcmcIterationsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(mcmcSampleSkipLabel)
                    .addComponent(mcmcSampleSkipField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(startMigLabel)
                    .addComponent(startMigField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(iterationsPerLogLabel)
                    .addComponent(iterationsPerLogField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(logsPerLineLabel)
                    .addComponent(logsPerLineField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tau-theta", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(51, 51, 255))); // NOI18N

        thauThetaPrintLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        thauThetaPrintLabel.setText("tau-theta-print");
        thauThetaPrintLabel.setToolTipText("<html><p>A multiplicative factor to use when printing tau and theta parameters to trace file</p>\n<p><b>Optional,</b> default: 10000</p></html>");

        tauThetaAlphaLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tauThetaAlphaLabel.setText("tau-theta-alpha");
        tauThetaAlphaLabel.setToolTipText("<html><p>Alpha parameter of the Gamma distribution used for the priors of tau and theta parameters</p>\n<p><b>Obligatory,</b> unless the priors of all tau and theta parameters are individually set</p></html>");

        tauThetaBetaLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tauThetaBetaLabel.setText("tau-theta-beta");
        tauThetaBetaLabel.setToolTipText("<html><p>Beta parameter of the Gamma distribution used for the priors of tau and theta parameters</p>\n<p><b>Obligatory,</b> unless the priors of all tau and theta parameters are individually set</p></html>");

        tauThetaAlphaField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tauThetaAlphaField.setForeground(java.awt.Color.lightGray);
        tauThetaAlphaField.setText("1");
        tauThetaAlphaField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tauThetaAlphaFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tauThetaAlphaFieldFocusLost(evt);
            }
        });
        tauThetaAlphaField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tauThetaAlphaFieldKeyTyped(evt);
            }
        });

        tauThetaBetaField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tauThetaBetaField.setForeground(java.awt.Color.lightGray);
        tauThetaBetaField.setText("10000");
        tauThetaBetaField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tauThetaBetaFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tauThetaBetaFieldFocusLost(evt);
            }
        });
        tauThetaBetaField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tauThetaBetaFieldKeyTyped(evt);
            }
        });

        tauThetaPrintField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tauThetaPrintField.setForeground(java.awt.Color.lightGray);
        tauThetaPrintField.setText("10000");
        tauThetaPrintField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tauThetaPrintFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tauThetaPrintFieldFocusLost(evt);
            }
        });
        tauThetaPrintField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tauThetaPrintFieldKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(thauThetaPrintLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tauThetaPrintField, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(tauThetaBetaLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tauThetaBetaField))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(tauThetaAlphaLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tauThetaAlphaField))))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {tauThetaAlphaLabel, tauThetaBetaLabel, thauThetaPrintLabel});

        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(thauThetaPrintLabel)
                    .addComponent(tauThetaPrintField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tauThetaAlphaLabel)
                    .addComponent(tauThetaAlphaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tauThetaBetaLabel)
                    .addComponent(tauThetaBetaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Mig-rate", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(51, 51, 255))); // NOI18N

        migRatePrintLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        migRatePrintLabel.setText("mig-rate-print");
        migRatePrintLabel.setToolTipText("<html><p>A multiplicative factor to use when printing migration rates to trace file</p>\n<p><b>Optional,</b> default: 0.001</p></html>");

        migRateAlphaLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        migRateAlphaLabel.setText("mig-rate-alpha");
        migRateAlphaLabel.setToolTipText("<html><p>Alpha parameter of the Gamma distribution used for the priors of migration rate parameters </p>\n<p><b>Obligatory,</b> unless the priors of all migration rates are individually set</p></html>");

        migRateBetaLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        migRateBetaLabel.setText("mig-rate-beta");
        migRateBetaLabel.setToolTipText("<html><p>Beta parameter of the Gamma distribution used for the priors ofmigration rate parameters</p>\n<p><b>Obligatory,</b> unless the priors of all migration rates are individually set</p></html>");

        migRateAlphaField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        migRateAlphaField.setForeground(java.awt.Color.lightGray);
        migRateAlphaField.setText("0.002");
        migRateAlphaField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                migRateAlphaFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                migRateAlphaFieldFocusLost(evt);
            }
        });
        migRateAlphaField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                migRateAlphaFieldActionPerformed(evt);
            }
        });
        migRateAlphaField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                migRateAlphaFieldKeyTyped(evt);
            }
        });

        migRateBetaField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        migRateBetaField.setForeground(java.awt.Color.lightGray);
        migRateBetaField.setText("0.00001");
        migRateBetaField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                migRateBetaFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                migRateBetaFieldFocusLost(evt);
            }
        });
        migRateBetaField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                migRateBetaFieldKeyTyped(evt);
            }
        });

        migRatePrintField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        migRatePrintField.setForeground(java.awt.Color.lightGray);
        migRatePrintField.setText("0.001");
        migRatePrintField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                migRatePrintFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                migRatePrintFieldFocusLost(evt);
            }
        });
        migRatePrintField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                migRatePrintFieldKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(migRatePrintLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(migRatePrintField, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(migRateAlphaLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(migRateAlphaField))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(migRateBetaLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(migRateBetaField)))
                .addContainerGap())
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {migRateAlphaLabel, migRateBetaLabel, migRatePrintLabel});

        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(migRatePrintLabel)
                    .addComponent(migRatePrintField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(migRateAlphaLabel)
                    .addComponent(migRateAlphaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(migRateBetaLabel)
                    .addComponent(migRateBetaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Locus-mut-rate", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(51, 51, 255))); // NOI18N

        locusMutRateLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        locusMutRateLabel.setText("locus-mut-rate");
        locusMutRateLabel.setToolTipText("<html><p>Determines the model used for rate variation across loci.</p>\n<p><b>CONST</b> – Constant rate across loci</p>\n<p><b>VAR</b> – Variable rates across loci. Rates are sampled throughout the algorithm assuming a prior Dirichlet distribution </p><p>&emsp &emsp with alpha parameter of 1.0. (alpha parameter can be changed manually in control file)</p>\n<p><b>FIXED</b> – Variable, but fixed, rates across loci. The scale factors corresponding to the relative rates should be provided in the specified file (see below). </p><p>&emsp &emsp The locus mutation rate file contains a list of factors (floating point numbers) separated by white spaces. </p><p>&emsp &emsp The number of factors should be equal to the number of loci, and ordered accordingly.</p>\n<p><b>Optional,</b> default: <b>CONST</b></p></html>");

        locusMutRateButtonGroup.add(locusConstRadioButton);
        locusConstRadioButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        locusConstRadioButton.setSelected(true);
        locusConstRadioButton.setText("CONST");
        locusConstRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locusConstRadioButtonActionPerformed(evt);
            }
        });

        locusMutRateButtonGroup.add(locusVarRadioButton);
        locusVarRadioButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        locusVarRadioButton.setText("VAR");
        locusVarRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locusVarRadioButtonActionPerformed(evt);
            }
        });

        locusMutRateButtonGroup.add(locusFixedRadioButton);
        locusFixedRadioButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        locusFixedRadioButton.setText("FIXED");
        locusFixedRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locusFixedRadioButtonActionPerformed(evt);
            }
        });

        chooseFixedFileButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        chooseFixedFileButton.setText("Select");
        chooseFixedFileButton.setEnabled(false);
        chooseFixedFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFixedFileButtonActionPerformed(evt);
            }
        });

        chooseLocusMutRateFileField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        chooseLocusMutRateFileField.setForeground(java.awt.Color.lightGray);
        chooseLocusMutRateFileField.setText("Choose a locus-mut-rate file");
        chooseLocusMutRateFileField.setEnabled(false);
        chooseLocusMutRateFileField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                chooseLocusMutRateFileFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                chooseLocusMutRateFileFieldFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(locusMutRateLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(locusConstRadioButton)
                        .addGap(18, 18, 18)
                        .addComponent(locusVarRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(locusFixedRadioButton))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(chooseLocusMutRateFileField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooseFixedFileButton)))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jPanel7Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {locusConstRadioButton, locusFixedRadioButton, locusVarRadioButton});

        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(locusMutRateLabel)
                    .addComponent(locusConstRadioButton)
                    .addComponent(locusVarRadioButton)
                    .addComponent(locusFixedRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooseFixedFileButton)
                    .addComponent(chooseLocusMutRateFileField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Finetune", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(51, 51, 255))); // NOI18N

        finetuneCoalTimeLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        finetuneCoalTimeLabel.setText("finetune-coal-time");
        finetuneCoalTimeLabel.setToolTipText("<html><p>Finetune parameter for the MCMC update of coalescence times</p>\n<p><b>Obligatory,</b> unless find-finetunes is set to TRUE.</p></html>");

        finetuneMigTimeLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        finetuneMigTimeLabel.setText("finetune-mig-time");
        finetuneMigTimeLabel.setToolTipText("<html><p>Finetune parameter for the MCMC update of migration event times</p>\n<p><b>Obligatory,</b> unless find-finetunes is set to TRUE.</p></html>");

        finetuneCoalTimeField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        finetuneCoalTimeField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                finetuneCoalTimeFieldKeyTyped(evt);
            }
        });

        finetuneMigTimeField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        finetuneMigTimeField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                finetuneMigTimeFieldKeyTyped(evt);
            }
        });

        findFinetunesLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        findFinetunesLabel.setText("find-finetunes");
        findFinetunesLabel.setToolTipText("<html><p>When set to TRUE the automatic finetune finding procedure is invoked</p>\n<p><b>Optional,</b> default: TRUE</p>\n<p>It is recommended to set this to ture, unless the specified finetune values showed good convergence properties in previous runs.</p></html>");

        findFinetunesButtonGroup.add(findFinetunesFalseRadioButton);
        findFinetunesFalseRadioButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        findFinetunesFalseRadioButton.setText("FALSE");
        findFinetunesFalseRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findFinetunesFalseRadioButtonActionPerformed(evt);
            }
        });

        findFinetunesButtonGroup.add(findFinetunesTrueRadioButton);
        findFinetunesTrueRadioButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        findFinetunesTrueRadioButton.setSelected(true);
        findFinetunesTrueRadioButton.setText("TRUE");
        findFinetunesTrueRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findFinetunesTrueRadioButtonActionPerformed(evt);
            }
        });

        findFinetunesNumStepLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        findFinetunesNumStepLabel.setText("find-finetunes-num-steps");
        findFinetunesNumStepLabel.setToolTipText("<html><p>The number of update steps for the automatic finetune finding procedure</p>\n<p><b>Optional,</b> default: 100</p></html>");

        findFinetunesNumStepField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        findFinetunesNumStepField.setForeground(java.awt.Color.lightGray);
        findFinetunesNumStepField.setText("100");
        findFinetunesNumStepField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                findFinetunesNumStepFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                findFinetunesNumStepFieldFocusLost(evt);
            }
        });
        findFinetunesNumStepField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                findFinetunesNumStepFieldKeyTyped(evt);
            }
        });

        findFinetunesSamplesPerStepLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        findFinetunesSamplesPerStepLabel.setText("find-finetunes-samples-per-step");
        findFinetunesSamplesPerStepLabel.setToolTipText("<html><p>The number of MCMC iterations per finetune update in the automatic finetune finding procedure</p>\n<p><b>Optional,</b> default: 100</p></html>");

        findFinetunesSamplesPerStepField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        findFinetunesSamplesPerStepField.setForeground(java.awt.Color.lightGray);
        findFinetunesSamplesPerStepField.setText("100");
        findFinetunesSamplesPerStepField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                findFinetunesSamplesPerStepFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                findFinetunesSamplesPerStepFieldFocusLost(evt);
            }
        });
        findFinetunesSamplesPerStepField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                findFinetunesSamplesPerStepFieldKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(finetuneMigTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(finetuneCoalTimeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(findFinetunesSamplesPerStepLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(findFinetunesNumStepLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(findFinetunesLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(findFinetunesFalseRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(findFinetunesTrueRadioButton))
                    .addComponent(finetuneCoalTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(finetuneMigTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(findFinetunesNumStepField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(findFinetunesSamplesPerStepField, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel8Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {findFinetunesFalseRadioButton, findFinetunesTrueRadioButton});

        jPanel8Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {findFinetunesNumStepField, findFinetunesSamplesPerStepField, finetuneCoalTimeField, finetuneMigTimeField});

        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(findFinetunesLabel)
                    .addComponent(findFinetunesFalseRadioButton)
                    .addComponent(findFinetunesTrueRadioButton))
                .addGap(8, 8, 8)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(findFinetunesNumStepLabel)
                    .addComponent(findFinetunesNumStepField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(findFinetunesSamplesPerStepLabel)
                    .addComponent(findFinetunesSamplesPerStepField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(finetuneCoalTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(finetuneCoalTimeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(finetuneMigTimeLabel)
                    .addComponent(finetuneMigTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        finetuneLocusRateLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        finetuneLocusRateLabel.setText("finetune-locus-rate");
        finetuneLocusRateLabel.setToolTipText("<html><p>Finetune parameter for the MCMC update of locus-specific mutation rates</p>\n<p><b>Obligatory</b> when locus-mut-rate is VAR, unless find-finetunes is set to TRUE.</p></html>");

        finetuneMixingLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        finetuneMixingLabel.setText("finetune-mixing");
        finetuneMixingLabel.setToolTipText("<html><p>Finetune parameter for the MCMC scaling update (called 'mixing')</p>\n<p><b>Obligatory,</b> unless find-finetunes is set to TRUE.</p></html>");

        finetuneLocusRateField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        finetuneLocusRateField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                finetuneLocusRateFieldKeyTyped(evt);
            }
        });

        finetuneMixingField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        finetuneTauLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        finetuneTauLabel.setText("finetune-tau");
        finetuneTauLabel.setToolTipText("<html><p>Finetune parameter for the MCMC update of all tau parameters</p>\n<p><b>Obligatory,</b> unless find-finetunes is set to TRUE, or the finetune parameters of\nall tau parameters are set individually</p></html>");

        finetuneTauField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        finetuneTauField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                finetuneTauFieldKeyTyped(evt);
            }
        });

        finetuneThetaLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        finetuneThetaLabel.setText("finetune-theta");
        finetuneThetaLabel.setToolTipText("<html><p>Finetune parameter for the MCMC update of all theta parameters</p>\n<p><b>Obligatory,</b> unless find-finetunes is set to TRUE.</p></html>");

        finetuneThetaField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        finetuneThetaField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                finetuneThetaFieldKeyTyped(evt);
            }
        });

        finetuneMigRateLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        finetuneMigRateLabel.setText("finetune-mig-rate");
        finetuneMigRateLabel.setToolTipText("<html><p>Finetune parameter for the MCMC update of all migration rates</p>\n<p><b>Obligatory,</b> unless find-finetunes is set to TRUE.</p></html>");

        finetuneMigRateField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        finetuneMigRateField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                finetuneMigRateFieldKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(finetuneLocusRateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(finetuneMixingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(finetuneTauLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(finetuneThetaLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(finetuneMigRateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(finetuneThetaField, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                    .addComponent(finetuneMigRateField)
                    .addComponent(finetuneTauField)
                    .addComponent(finetuneMixingField)
                    .addComponent(finetuneLocusRateField))
                .addContainerGap())
        );

        jPanel9Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {finetuneLocusRateLabel, finetuneMixingLabel});

        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(finetuneThetaLabel)
                    .addComponent(finetuneThetaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(finetuneMigRateLabel)
                    .addComponent(finetuneMigRateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(finetuneTauLabel)
                    .addComponent(finetuneTauField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(finetuneLocusRateLabel)
                    .addComponent(finetuneLocusRateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(finetuneMixingLabel)
                    .addComponent(finetuneMixingField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Mixing", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(51, 51, 255))); // NOI18N

        mixingLable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        mixingLable.setText("mixing:");
        mixingLable.setToolTipText("<html><p>If this optional flag is set (no need to specify value), then mixing update step is not applied. Note that mixing is also not applied if one of the sampled populations is associated with a fixed non-zero age (see below). (v1.2.3 and up)</html>");

        noMixingCheckBox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        noMixingCheckBox.setText("no-mixing");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mixingLable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(noMixingCheckBox)
                .addContainerGap(63, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mixingLable)
                    .addComponent(noMixingCheckBox))
                .addGap(0, 53, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel15Layout.createSequentialGroup()
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel15Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane3.setViewportView(jPanel15);

        jTabbedPane1.addTab("General", jScrollPane3);

        jScrollPane2.setPreferredSize(new java.awt.Dimension(598, 848));

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tree", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        treeLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        treeLabel.setText("Tree");

        treeField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        treeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treeFieldActionPerformed(evt);
            }
        });
        treeField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                treeFieldKeyTyped(evt);
            }
        });

        generateTreeInputButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        generateTreeInputButton.setText("Generate Tree");
        generateTreeInputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateTreeInputButtonActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Enter an input in the form of a Generelized Newick, then press");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Generate Tree.");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Please enter a binary tree topology in a generalized Newick format, listing names of leaves");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("and internal nodes of the tree.");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Example 1:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setText("with Chimpanzee as outgroup:");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel10.setText("((((europe,asia)eurasia,yoruba)africa1,san)africa2,chimpanzee)root");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel11.setText("phylogeny of human populations signifying Europe, Asia, Yoruba, and San,");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setText("Example 2:");

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel13.setText("canid phylogeny for European and Asian dogs and wolves, with Golden");

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel14.setText("Jackal as outgroup:");

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel15.setText("(((dogAs,dogEu)dog,(wolfAs,wolfEu)wolf)dog_wolf,jackal)root");

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(treeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(treeField, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(generateTreeInputButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel14Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5))
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addGroup(jPanel14Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel11))
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addGroup(jPanel14Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel13))
                            .addComponent(jLabel14)
                            .addComponent(jLabel15))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(generateTreeInputButton)
                    .addComponent(treeLabel)
                    .addComponent(treeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel15)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Expected Tree Output", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(51, 51, 255))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Expected output for the Current-POPs:");

        expectedCurrentPOPsOutputTextArea.setColumns(20);
        expectedCurrentPOPsOutputTextArea.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        expectedCurrentPOPsOutputTextArea.setRows(5);
        expectedCurrentPOPsOutputTextArea.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        expectedCurrentPOPsOutputTextArea.setEnabled(false);
        expectedCurrentPOPsOutputTextArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                expectedCurrentPOPsOutputTextAreaMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(expectedCurrentPOPsOutputTextArea);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Expected output for the Ancerstral-POPs:");

        expectedAncestralPOPsOutputTextArea.setColumns(20);
        expectedAncestralPOPsOutputTextArea.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        expectedAncestralPOPsOutputTextArea.setRows(5);
        expectedAncestralPOPsOutputTextArea.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        expectedAncestralPOPsOutputTextArea.setEnabled(false);
        expectedAncestralPOPsOutputTextArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                expectedAncestralPOPsOutputTextAreaMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(expectedAncestralPOPsOutputTextArea);

        updateTauInitialsButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        updateTauInitialsButton.setText("Update Tau-Initials");
        updateTauInitialsButton.setEnabled(false);
        updateTauInitialsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateTauInitialsButtonActionPerformed(evt);
            }
        });

        updateSamplesButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        updateSamplesButton.setText("Update Samples");
        updateSamplesButton.setEnabled(false);
        updateSamplesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateSamplesButtonActionPerformed(evt);
            }
        });

        jLabel22.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel22.setText("CURRENT-POPS-START");

        jLabel23.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel23.setText("CURRENT-POPS-END");

        jLabel24.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel24.setText("ANCESTRAL-POPS-START");

        jLabel25.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel25.setText("ANCESTRAL-POPS-END");

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5)
                    .addComponent(jScrollPane4)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel16Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(updateSamplesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addComponent(jLabel25)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 271, Short.MAX_VALUE)
                        .addComponent(updateTauInitialsButton))
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel22)
                            .addComponent(jLabel23)
                            .addComponent(jLabel2)
                            .addComponent(jLabel24))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel16Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {updateSamplesButton, updateTauInitialsButton});

        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel23)
                .addGap(3, 3, 3)
                .addComponent(updateSamplesButton)
                .addGap(8, 8, 8)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(updateTauInitialsButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(12, 12, 12))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jScrollPane2.setViewportView(jPanel13);

        jTabbedPane1.addTab("Tree", jScrollPane2);

        jPanel20.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Mig-Bands", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(51, 51, 255))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("This tab is optional, and the Mig-Bands may remain empty.");

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel17.setText("In order to add a new Mig-Band, you are required to add the name of the source population");

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel18.setText("of migration, the name of the target population of migration, and a mig-rate-print which is ");

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel19.setText("a multiplicative factor to use when printing migration rates to trace file.");

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel17)
                    .addComponent(jLabel18)
                    .addComponent(jLabel19))
                .addContainerGap(57, Short.MAX_VALUE))
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel19)
                .addContainerGap(52, Short.MAX_VALUE))
        );

        jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Expected Mig-Bands output", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabel21.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel21.setText("Expected output of the Mig-Bands:");

        expectedMigBandsOutputTextArea.setColumns(20);
        expectedMigBandsOutputTextArea.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        expectedMigBandsOutputTextArea.setRows(5);
        expectedMigBandsOutputTextArea.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        expectedMigBandsOutputTextArea.setEnabled(false);
        jScrollPane8.setViewportView(expectedMigBandsOutputTextArea);

        deleteMigBandsButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        deleteMigBandsButton.setText("Delete Mig-Bands");
        deleteMigBandsButton.setEnabled(false);
        deleteMigBandsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMigBandsButtonActionPerformed(evt);
            }
        });

        jLabel26.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel26.setText("MIG-BANDS-START");

        jLabel27.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel27.setText("MIG-BANDS-END");

        addNewMigBandButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        addNewMigBandButton.setText("Add a new Mig-Band");
        addNewMigBandButton.setEnabled(false);
        addNewMigBandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewMigBandButtonActionPerformed(evt);
            }
        });

        jLabel20.setText("Add New Mig-Band");

        sourceMigBandComboBox.setEnabled(false);

        targetMigBandComboBox.setEnabled(false);

        jLabel28.setText("Source");

        jLabel29.setText("Target");

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane8)
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel21)
                            .addComponent(jLabel26)
                            .addComponent(jLabel27)
                            .addComponent(jLabel20)
                            .addGroup(jPanel21Layout.createSequentialGroup()
                                .addComponent(jLabel28)
                                .addGap(111, 111, 111)
                                .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel21Layout.createSequentialGroup()
                                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(sourceMigBandComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(addNewMigBandButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel21Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(deleteMigBandsButton))
                                    .addGroup(jPanel21Layout.createSequentialGroup()
                                        .addGap(7, 7, 7)
                                        .addComponent(targetMigBandComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel21Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addNewMigBandButton, deleteMigBandsButton});

        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel21Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(jLabel29))
                .addGap(8, 8, 8)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sourceMigBandComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(targetMigBandComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addNewMigBandButton)
                    .addComponent(deleteMigBandsButton))
                .addGap(18, 18, 18)
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel26)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel27)
                .addContainerGap(260, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jScrollPane7.setViewportView(jPanel18);

        jTabbedPane1.addTab("Mig-Bands", jScrollPane7);

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Load/Save Control File", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(51, 51, 255))); // NOI18N

        chooseDestinationFolderButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        chooseDestinationFolderButton.setText("Browse");
        chooseDestinationFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseDestinationFolderButtonActionPerformed(evt);
            }
        });

        controlFileDestinationLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        controlFileDestinationLabel.setText("Control File Destination:");
        controlFileDestinationLabel.setToolTipText("<html><p>The Control-file's destination</p>\n<p><b>Optional,</b> default:  if nothing is chosen, the control-file will appear in the same folder as the app</p></p></html>");

        destinationFolderField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(controlFileDestinationLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(destinationFolderField, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chooseDestinationFolderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(controlFileDestinationLabel)
                    .addComponent(destinationFolderField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseDestinationFolderButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        generateFileButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        generateFileButton.setText("Save");
        generateFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateFileButtonActionPerformed(evt);
            }
        });

        exitButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        CFGLoadButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        CFGLoadButton.setText("Load");
        CFGLoadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CFGLoadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(CFGLoadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(generateFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel11Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {CFGLoadButton, exitButton, generateFileButton});

        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exitButton)
                    .addComponent(generateFileButton)
                    .addComponent(CFGLoadButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel11);

        jTabbedPane1.addTab("Load / Save", jScrollPane1);

        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Help", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel16.setText("For further information and help, please address the");

        openWebManualLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        openWebManualLabel.setForeground(new java.awt.Color(51, 51, 255));
        openWebManualLabel.setText("Manual");
        openWebManualLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                openWebManualLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                openWebManualLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                openWebManualLabelMouseExited(evt);
            }
        });

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(openWebManualLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(openWebManualLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane6.setViewportView(jPanel17);

        jTabbedPane1.addTab("Help", jScrollPane6);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 697, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked

    }//GEN-LAST:event_formMouseClicked

    // A helper function which checks the validation of the input in the General
    // section of the form. If no errors are found, the process will continue.
    // If there are errors, the program will output a message to the user and
    // terminates the process.
    private boolean generalValidate(StringBuilder errorString) {
        boolean containErrors = false;
        if (!Validate.validateInt(numLociField.getText())) {
            errorString.append("The num-loci input must be a positive integer." + "\n");
            containErrors = true;
        }
        if (!Validate.validateInt(burnInField.getText())) {
            errorString.append("The burn-in input must be a positive integer." + "\n");
            containErrors = true;
        }
        if (!Validate.validateInt(mcmcIterationsField.getText())) {
            errorString.append("The mcmc-iterations input must be a positive integer." + "\n");
            containErrors = true;
        }
        if (!Validate.validateInt(mcmcSampleSkipField.getText())) {
            errorString.append("The mcmc-sample-skip input must be a positive integer." + "\n");
            containErrors = true;
        }
        if (!Validate.validateInt(startMigField.getText())) {
            errorString.append("The start-mig input must be a positive integer." + "\n");
            containErrors = true;
        }
        if (!Validate.validateInt(iterationsPerLogField.getText())) {
            errorString.append("The iterations-per-log input must be a positive integer." + "\n");
            containErrors = true;
        }
        if (!Validate.validateInt(logsPerLineField.getText())) {
            errorString.append("The logs-per-line input must be a positive integer." + "\n");
            containErrors = true;
        }
        return containErrors;
    }

    // A helper function which checks the validation of the input in the Tau/Mig
    // section of the form. If no errors are found, the process will continue.
    // If there are errors, the program will output a message to the user and
    // terminates the process.
    private boolean tauMigValidate(StringBuilder errorString) {
        boolean containErrors = false;
        if (!Validate.validateDouble(tauThetaPrintField.getText())) {
            errorString.append("The tau-theta-print input must be a positive number." + "\n");
            containErrors = true;
        }
        if (!Validate.validateDouble(tauThetaAlphaField.getText())) {
            errorString.append("The tau-theta-alpha input must be a positive number." + "\n");
            containErrors = true;
        }
        if (!Validate.validateDouble(tauThetaBetaField.getText())) {
            errorString.append("The tau-theta-beta input must be a positive number." + "\n");
            containErrors = true;
        }
        if (!Validate.validateDouble(migRatePrintField.getText())) {
            errorString.append("The mig-rate-print input must be a positive number." + "\n");
            containErrors = true;
        }
        if (!Validate.validateDouble(migRateAlphaField.getText())) {
            errorString.append("The mig-rate-alpha input must be a positive number." + "\n");
            containErrors = true;
        }
        if (!Validate.validateDouble(migRateBetaField.getText())) {
            errorString.append("The mig-rate-beta input must be a positive number." + "\n");
            containErrors = true;
        }
        return containErrors;
    }

    // A helper function which checks the validation of the input in the Finetune
    // section of the form. If no errors are found, the process will continue.
    // If there are errors, the program will output a message to the user and
    // terminates the process.
    private boolean finetunesValidate(StringBuilder errorString) {
        boolean containErrors = false;
        if (!Validate.validateInt(findFinetunesNumStepField.getText())) {
            errorString.append("The find-fintetunes-num-step input must be a positive integer." + "\n");
            containErrors = true;
        }
        if (!Validate.validateInt(findFinetunesSamplesPerStepField.getText())) {
            errorString.append("The find-fintetunes-sample-per-step input must be a positive integer." + "\n");
            containErrors = true;
        }
        if (!Validate.validateDouble(finetuneCoalTimeField.getText())) {
            errorString.append("The finetune-coal-time input must be a positive number." + "\n");
            containErrors = true;
        }
        if (!Validate.validateDouble(finetuneMigTimeField.getText())) {
            errorString.append("The finetune-mig-time input must be a positive number." + "\n");
            containErrors = true;
        }
        if (!Validate.validateDouble(finetuneThetaField.getText())) {
            errorString.append("The finetune-theta input must be a positive number." + "\n");
            containErrors = true;
        }
        if (!Validate.validateDouble(finetuneMigRateField.getText())) {
            errorString.append("The finetune-mig-rate input must be a positive number." + "\n");
            containErrors = true;
        }
        if (!Validate.validateDouble(finetuneTauField.getText())) {
            errorString.append("The finetune-tau-field input must be a positive number." + "\n");
            containErrors = true;
        }
        if (!Validate.validateDouble(finetuneLocusRateField.getText())) {
            errorString.append("The finetune-locus-rate input must be a positive number." + "\n");
            containErrors = true;
        }
        return containErrors;
    }

    private boolean emptyTreeValidate() {
        if (currentPopSamples == null) {
            return true;
        }
        boolean allEmpty = true;
        for (int i = 0; i < currentPopSamples.length; i++) {
            if (!"".equals(currentPopSamples[i])) {
                allEmpty = false;
            }
        }
        if (allEmpty) {
            return true;
        }

        return false;
    }

    private boolean currentPopValidate() {
        if(currentPopSamples == null) return true;
        for (int i = 0; i < currentPopSamples.length; i++) {
            if ("".equals(currentPopSamples[i])) {
                return true;
            }
        }
        return false;
    }

    private boolean ancestralPopValidate() {
        if(ancestralTauInitial == null) return true;
        for (int i = 0; i < ancestralTauInitial.length; i++) {
            if ("".equals(ancestralTauInitial[i])) {
                return true;
            }
        }
        return false;
    }

    private boolean migBandsValidate() {
        for (int i = 0; i < migBandsSourceList.size(); i++) {
            boolean sourceBool = false;
            boolean targetBool = false;
            for (int j = 0; j < currentPopArray.length; j++) {
                if (migBandsSourceList.get(i).equals(currentPopArray[j].data)) {
                    sourceBool = true;
                }
                if (migBandsTargetList.get(i).equals(currentPopArray[j].data)) {
                    targetBool = true;
                }
            }
            for (int j = 0; j < ancestralPopArray.length; j++) {
                if (migBandsSourceList.get(i).equals(ancestralPopArray[j].data)) {
                    sourceBool = true;
                }
                if (migBandsTargetList.get(i).equals(ancestralPopArray[j].data)) {
                    targetBool = true;
                }
            }

            if (!sourceBool || !targetBool) {
                return true;
            }
        }

        return false;
    }

    // A method to check if there are any errors in the input the user places
    private boolean checkInputForErrors() {
        StringBuilder errorString = new StringBuilder();
        // Checking for errors in the general section
        errorString.append("Errors in the General input:" + "\n");
        boolean foundErrors = generalValidate(errorString);
        if (foundErrors) {
            // If there are errors in the general section, the program will output a message to the user
            // that the input contains errors, and where the errors are. It will then stop the operation and
            // without checking the rest of the input and without making a control file.
            errorString.append("\nThe Control File was not made");
            JOptionPane.showMessageDialog(null, errorString.toString(), "message", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        // VALIDATE TAU-THETA/MIG-RATE
        errorString = new StringBuilder();
        // Checking for errors in the Tau-Theta / Mig-Rate section
        errorString.append("Errors in the Tau-Theta/Mig-Rate input:" + "\n");
        foundErrors = tauMigValidate(errorString);
        if (foundErrors) {
            // If there are errors in the Tau-Theta / Mig-Rate section, the program will output a message to the user
            // that the input contains errors, and where the errors are. It will then stop the operation and
            // without checking the rest of the input and without making a control file.
            errorString.append("\nThe Control File was not made");
            JOptionPane.showMessageDialog(null, errorString.toString(), "message", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        // VALIDATE FINETUNES
        errorString = new StringBuilder();
        // Checking for errors in the Finetune section
        errorString.append("Errors in the Finetune input:" + "\n");
        foundErrors = finetunesValidate(errorString);
        if (foundErrors) {
            // If there are errors in the Finetune section, the program will output a message to the user
            // that the input contains errors, and where the errors are. It will then stop the operation and
            // without checking the rest of the input and without making a control file.
            errorString.append("\nThe Control File was not made");
            JOptionPane.showMessageDialog(null, errorString.toString(), "message", JOptionPane.ERROR_MESSAGE);
            return true;
        }

        errorString = new StringBuilder();
        errorString.append("No tree was generated.");
        foundErrors = emptyTreeValidate();
        if (foundErrors) {
            // if there are current populations without a sample,
            // the program will send a message to the user that the input contains errors. It will then stop
            // the operation without checking the rest of the input and without making a control file.
            errorString.append("\nThe Control File was not made");
            JOptionPane.showMessageDialog(null, errorString.toString(), "message", JOptionPane.ERROR_MESSAGE);
            return true;
        }

        errorString = new StringBuilder();
        errorString.append("There exist a Current-Pop without a sample.");
        foundErrors = currentPopValidate();
        if (foundErrors) {
            // if there are current populations without a sample,
            // the program will send a message to the user that the input contains errors. It will then stop
            // the operation without checking the rest of the input and without making a control file.
            errorString.append("\nThe Control File was not made");
            JOptionPane.showMessageDialog(null, errorString.toString(), "message", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        errorString = new StringBuilder();
        errorString.append("There exists an Ancestral-Pop without a tau-initial.");
        foundErrors = ancestralPopValidate();
        if (foundErrors) {
            // if there are ancestral populations without a tau-initial,
            // the program will send a message to the user that the input contains errors. It will then stop
            // the operation without checking the rest of the input and without making a control file.
            errorString.append("\nThe Control File was not made");
            JOptionPane.showMessageDialog(null, errorString.toString(), "message", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        errorString = new StringBuilder();
        errorString.append("The populatations in the Mig-Bands do not match the given populations.");
        foundErrors = migBandsValidate();
        if (foundErrors) {
            // if there are names in the mig-bands who do not match the given populations in the tree
            // the program will send a message to the user that the input contains errors. It will then stop
            // the operation without checking the rest of the input and without making a control file.
            errorString.append("\nThe Control File was not made");
            JOptionPane.showMessageDialog(null, errorString.toString(), "message", JOptionPane.ERROR_MESSAGE);
            return true;
        }

        // No errors were found in the user's input.
        return false;
    }

    // The method writes the General input to the control file
    private void writeGeneral(BufferedWriter output) throws IOException {

        if (!"".equals(seqFileField.getText())) {
            output.write(TAB + seqFileLabel.getText() + TAB + seqFileField.getText());
            output.newLine();
        }
        if (!"".equals(traceFileField.getText())) {
            output.write(TAB + traceFileLabel.getText() + TAB + traceFileField.getText());
            output.newLine();
        }
        if (!"".equals(numLociField.getText())) {
            output.write(TAB + numLociLabel.getText() + TAB + numLociField.getText());
            output.newLine();
        }
        if (!"".equals(randomSeedField.getText())) {
            output.write(TAB + randomSeedLabel.getText() + TAB + randomSeedField.getText());
            output.newLine();
        }
        if (!"".equals(burnInField.getText())) {
            output.write(TAB + burnInLabel.getText() + TAB + burnInField.getText());
            output.newLine();
        }
        if (!"".equals(mcmcIterationsField.getText())) {
            output.write(TAB + mcmcIterationsLabel.getText() + TAB + mcmcIterationsField.getText());
            output.newLine();
        }
        if (!"".equals(mcmcSampleSkipField.getText())) {
            output.write(TAB + mcmcSampleSkipLabel.getText() + TAB + mcmcSampleSkipField.getText());
            output.newLine();
        }
        if (!"".equals(startMigField.getText())) {
            output.write(TAB + startMigLabel.getText() + TAB + startMigField.getText());
            output.newLine();
        }
        if (!"".equals(iterationsPerLogField.getText())) {
            output.write(TAB + iterationsPerLogLabel.getText() + TAB + iterationsPerLogField.getText());
            output.newLine();
        }
        if (!"".equals(logsPerLineField.getText())) {
            output.write(TAB + logsPerLineLabel.getText() + TAB + logsPerLineField.getText());
            output.newLine();
        }
    }

    // The method writes the Tau-Theta input to the control file
    private void writeTauTheta(BufferedWriter output) throws IOException {
        if (!"".equals(tauThetaPrintField.getText())) {
            output.write(TAB + thauThetaPrintLabel.getText() + TAB + tauThetaPrintField.getText());
            output.newLine();
        }
        if (!"".equals(tauThetaAlphaField.getText())) {
            output.write(TAB + tauThetaAlphaLabel.getText() + TAB + tauThetaAlphaField.getText());
            output.newLine();
        }
        if (!"".equals(tauThetaBetaField.getText())) {
            output.write(TAB + tauThetaBetaLabel.getText() + TAB + tauThetaBetaField.getText());
            output.newLine();
        }
    }

    // The method writes the Mig-Rate input to the control file
    private void writeMigRate(BufferedWriter output) throws IOException {
        if (!"".equals(migRatePrintField.getText())) {
            output.write(TAB + migRatePrintLabel.getText() + TAB + migRatePrintField.getText());
            output.newLine();
        }
        if (!"".equals(migRateAlphaField.getText())) {
            output.write(TAB + migRateAlphaLabel.getText() + TAB + migRateAlphaField.getText());
            output.newLine();
        }
        if (!"".equals(migRateBetaField.getText())) {
            output.write(TAB + migRateBetaLabel.getText() + TAB + migRateBetaField.getText());
            output.newLine();
        }
    }

    // The method writes the Locus-Mut-Rate input to the control file
    private void writeLocusMutRate(BufferedWriter output) throws IOException {
        if (locusConstRadioButton.isSelected()) {
            output.write(TAB + locusMutRateLabel.getText() + TAB + locusConstRadioButton.getText());
            output.newLine();
        } else if (locusVarRadioButton.isSelected()) {
            output.write(TAB + locusMutRateLabel.getText() + TAB + locusVarRadioButton.getText() + TAB + "1.0");
            output.newLine();
        } else if (locusFixedRadioButton.isSelected()) {
            if (fixedFileChosen) {
                output.write(TAB + locusMutRateLabel.getText() + TAB + locusFixedRadioButton.getText() + TAB + chooseLocusMutRateFileField.getText());
                output.newLine();
            }
        }
    }

    // The method writes the Finetune input to the control file
    private void writeFinetune(BufferedWriter output) throws IOException {
        if (findFinetunesFalseRadioButton.isSelected()) {
            output.write(TAB + findFinetunesLabel.getText() + TAB + findFinetunesFalseRadioButton.getText());
            output.newLine();
        } else if (findFinetunesTrueRadioButton.isSelected()) {
            output.write(TAB + findFinetunesLabel.getText() + TAB + findFinetunesTrueRadioButton.getText());
            output.newLine();
        }

        if (findFinetunesBool) {
            if (!"".equals(findFinetunesNumStepField.getText())) {
                output.write(TAB + findFinetunesNumStepLabel.getText() + TAB + findFinetunesNumStepField.getText());
                output.newLine();
            }
            if (!"".equals(findFinetunesSamplesPerStepField.getText())) {
                output.write(TAB + findFinetunesSamplesPerStepLabel.getText() + TAB + findFinetunesSamplesPerStepField.getText());
                output.newLine();
            }
        }

        if (!"".equals(finetuneCoalTimeField.getText())) {
            output.write(TAB + finetuneCoalTimeLabel.getText() + TAB + finetuneCoalTimeField.getText());
            output.newLine();
        }
        if (!"".equals(finetuneMigTimeField.getText())) {
            output.write(TAB + finetuneMigTimeLabel.getText() + TAB + finetuneMigTimeField.getText());
            output.newLine();
        }
        if (!"".equals(finetuneThetaField.getText())) {
            output.write(TAB + finetuneThetaLabel.getText() + TAB + finetuneThetaField.getText());
            output.newLine();
        }
        if (!"".equals(finetuneMigRateField.getText())) {
            output.write(TAB + finetuneMigRateLabel.getText() + TAB + finetuneMigRateField.getText());
            output.newLine();
        }
        if (!"".equals(finetuneTauField.getText())) {
            output.write(TAB + finetuneTauLabel.getText() + TAB + finetuneTauField.getText());
            output.newLine();
        }
        if (!"".equals(finetuneLocusRateField.getText())) {
            output.write(TAB + finetuneLocusRateLabel.getText() + TAB + finetuneLocusRateField.getText());
            output.newLine();
        }
        if (!"".equals(finetuneMixingField.getText())) {
            output.write(TAB + finetuneMixingLabel.getText() + TAB + finetuneMixingField.getText());
            output.newLine();
        }
    }

    // The method writes the No-Mixing input to the control file
    private void writeNoMixing(BufferedWriter output) throws IOException {
        if (noMixingCheckBox.isSelected()) {
            output.write(TAB + noMixingCheckBox.getText());
            output.newLine();
            output.newLine();

        }
    }

    // Write the general-info to the control file.
    private void writeGeneralInfo(BufferedWriter output) throws IOException {
        // Starts here
        output.write("GENERAL-INFO-START");
        output.newLine();
        output.newLine();

        // Write the general input
        writeGeneral(output);

        output.newLine();

        // Write the Tau-Theta input
        writeTauTheta(output);

        output.newLine();

        // Write the Mig-Rate input
        writeMigRate(output);

        output.newLine();

        // Write the Locus-Mut-Rate input
        writeLocusMutRate(output);

        output.newLine();

        // Write the Finetune input
        writeFinetune(output);

        output.newLine();

        // Write the No-Mixing inoput
        writeNoMixing(output);

        output.newLine();

        // General-Info ends here
        output.write("GENERAL-INFO-END");
    }

    private String writeCurrentPopSample(int index) {
        StringBuilder currentPopOutput = new StringBuilder();
        currentPopOutput.append(
                TAB + TAB + "samples"
                + TAB + adjustedCurrentPopSamples[index]
        );
        return currentPopOutput.toString();
    }

    // Write the current-pops info to the control file
    private void writeCurrentPops(BufferedWriter output, BSTNode[] nodeArray) throws IOException {
        output.write("CURRENT-POPS-START");
        output.newLine();
        output.newLine();

        for (int i = 0; i < nodeArray.length; i++) {
            output.write(TAB + "POP-START");
            output.newLine();
            output.write(TAB + TAB + "name" + TAB + nodeArray[i].data);
            output.newLine();
            output.write(writeCurrentPopSample(i));
            //output.write(TAB + TAB + "samples" + TAB + currentPopSamples[i] + TAB + hiploidDiploid[i]);
            output.newLine();
            output.write(TAB + "POP-END");
            output.newLine();
            output.newLine();
        }
        output.write("CURRENT-POPS-END");
        output.newLine();
        output.newLine();
        output.newLine();
    }

    // Write the ancestral-pops info to the control file
    private void writeAncestralPops(BufferedWriter output, BSTNode[] nodeArray) throws IOException {
        output.write("ANCESTRAL-POPS-START");
        output.newLine();
        output.newLine();
        for (int i = 0; i < nodeArray.length; i++) {
            output.write(TAB + "POP-START");
            output.newLine();
            output.write(TAB + TAB + "name" + TAB + nodeArray[i].data);
            output.newLine();
            output.write(TAB + TAB + "children" + TAB + nodeArray[i].left.data + TAB + nodeArray[i].right.data);
            output.newLine();
            output.write(TAB + TAB + "tau-initial" + TAB + ancestralTauInitial[i]);
            output.newLine();
            output.write(TAB + "POP-END");
            output.newLine();
            output.newLine();
        }
        output.write("ANCESTRAL-POPS-END");
        output.newLine();
        output.newLine();
        output.newLine();
    }

    // Write the Mig-Bands info to the control file
    private void writeMigBands(BufferedWriter output) throws IOException {
        output.write("MIG-BANDS-START");
        output.newLine();
        output.newLine();
        for (int i = 0; i < migBandsCounter; i++) {
            output.write(TAB + "BAND-START");
            output.newLine();
            output.write(TAB + TAB + "source" + TAB + migBandsSourceList.get(i));
            output.newLine();
            output.write(TAB + TAB + "target" + TAB + migBandsTargetList.get(i));
            output.newLine();
            output.write(TAB + "BAND-END");
            output.newLine();
            output.newLine();
        }
        output.write("MIG-BANDS-END");
        output.newLine();
        output.newLine();
        output.newLine();
    }

    private void treeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_treeFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_treeFieldActionPerformed

    private void treeFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_treeFieldKeyTyped
        typedTreeInput(evt);
    }//GEN-LAST:event_treeFieldKeyTyped

    // Helper function to not allow typing white spaces
    private void typedTreeInput(java.awt.event.KeyEvent evt) {
        char c = evt.getKeyChar();
        if (Character.isWhitespace(c)) {
            evt.consume();
        }
    }

    // Helper function to have only numerical values in the fields.
    private void onlyNumericalValue(java.awt.event.KeyEvent evt) {
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACKSPACE) || (c == KeyEvent.VK_DELETE))) {
            evt.consume();
        }
    }

    // Helper function to have only numerical values and a single dot in the fields.
    private void onlyNumericalValueAndDot(java.awt.event.KeyEvent evt, javax.swing.JTextField jTextField) {
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || (c == '.') || (c == KeyEvent.VK_BACKSPACE) || (c == KeyEvent.VK_DELETE))) {
            evt.consume();
        }
        if (c == '.') {
            if (jTextField.getText().indexOf(".") != -1) {
                evt.consume();
            }
        }
    }

    // Helper function for focus gained for default fields
    private void focusGained(javax.swing.JTextField jTextField) {
        if (jTextField.getForeground().equals(java.awt.Color.LIGHT_GRAY)) {
            jTextField.setText("");
            jTextField.setForeground(java.awt.Color.BLACK);
        }
    }

    // Helper function for focus gained for default fields
    private void focusLost(javax.swing.JTextField jTextField, String s) {
        if ("".equals(jTextField.getText())) {
            jTextField.setForeground(java.awt.Color.LIGHT_GRAY);
            jTextField.setText(s);
        }
    }

    // When clicking on the button "Validate Tree Input", the user recieves feedback if
    // the input they typed is correct or not.
    // If not, they recieve an error messege. Otherwise, they recieve a messege the input is valid.
    private void generateTreeInputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateTreeInputButtonActionPerformed
        if (!firstTimeCreatingTree) {
            JFrame frame = new JFrame();
            Object[] options = {"Generate new tree", "Cancel"};
            int n = JOptionPane.showOptionDialog(frame,
                    "Generating a new tree will delete all the data of the previos tree, would you like to continue?",
                    "Generate new tree",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[0]);
            if (n == JOptionPane.NO_OPTION) {
                return;
            }

            InitializeTreeData();
        }

        StringBuilder errorString = new StringBuilder();
        errorString.append("Errors in the Tree input:\n\n");
        // Checking the tree input for errors on a basic level
        boolean foundErrors = validateTreeInput(treeField.getText(), errorString);
        if (foundErrors) {
            // If an error was found, the program will send the user a message
            // with the error it found (there may be more)
            JOptionPane.showMessageDialog(null, errorString.toString(), "message", JOptionPane.ERROR_MESSAGE);
        } else {

            // If no errors were found, we'll check the tree on a deeper level.
            // we'll construct the tree and check if it is made right.
            nwtCreate = new NewickTree(treeField.getText());
            if (!validateNewickTree(nwtCreate, treeField.getText())) {
                // If an error was found, the program will send the user an
                // error message.
                errorString.append("Invalid input for Newick Tree!");
                JOptionPane.showMessageDialog(null, errorString.toString(), "message", JOptionPane.ERROR_MESSAGE);
            } else if (!checkForWhiteSpace(nwtCreate)) {
                // If there are any white spaces in one of the names, the program will
                // send the user an error message.
                errorString.append("Usage of white spaces is not allowed. You may use '_' or '-'");
                JOptionPane.showMessageDialog(null, errorString.toString(), "message", JOptionPane.ERROR_MESSAGE);
            } else if (!checkForDuplications(nwtCreate)) {
                // If there are identical names for different pops, the program will
                // send the user an error message
                errorString.append("Duplicate names for POPs are not allowed!");
                JOptionPane.showMessageDialog(null, errorString.toString(), "message", JOptionPane.ERROR_MESSAGE);
            } else if (!checkForEmptyNames(nwtCreate)) {
                // If there are empty names for the pops, the program will
                // send the user an error messag
                errorString.append("Empty names for POPs are not allowed!");
                JOptionPane.showMessageDialog(null, errorString.toString(), "message", JOptionPane.ERROR_MESSAGE);
            } else {

                currentPopArray = nwtCreate.childArray;
                ancestralPopArray = nwtCreate.parentArray;

                // If no errors were found, the program will send a message to the user the input is valid
                // and also the expected output of what the current and ancestral pops are.
                if (firstTimeCreatingTree) {

                    // We create an array for the SAMPLES of each CURRENT-POP
                    currentPopSamples = new String[currentPopArray.length];
                    hiploidDiploid = new String[currentPopArray.length];
                    adjustedCurrentPopSamples = new String[currentPopArray.length];
                    for (int i = 0; i < currentPopSamples.length; i++) {
                        currentPopSamples[i] = "";
                        hiploidDiploid[i] = "";
                        adjustedCurrentPopSamples[i] = "";
                    }

                    // The user fills the Samples on a seperate panel
                    popCurrentLegal = InputPanel.insertCurrentLabel(currentPopArray, currentPopSamples, hiploidDiploid);
                    if (!popCurrentLegal) {
                        return;
                    }
                } else {

                    // We create an array for the SAMPLES of each CURRENT-POP
                    String[] newPopSamples = new String[currentPopArray.length];
                    String[] newHiploidDiploid = new String[currentPopArray.length];
                    String[] newAdjustedCurrentPopSamples = new String[currentPopArray.length];
                    if(currentPopSamples != null)
                    {
                        for (int i = 0; i < currentPopArray.length; i++) {
                            newPopSamples[i] = "";
                        }
                    }
                    
                    if(hiploidDiploid != null)
                    {
                        for (int i = 0; i < currentPopArray.length; i++) {
                            newHiploidDiploid[i] = "";
                        }
                    }
                    
                    if(adjustedCurrentPopSamples != null)
                    {
                        for (int i = 0; i < currentPopArray.length; i++) {
                            newAdjustedCurrentPopSamples[i] = "";
                        }
                    }
                            

                    // The user fills the Samples on a seperate panel
                    popCurrentLegal = InputPanel.insertCurrentLabel(currentPopArray, newPopSamples, newHiploidDiploid);
                    if (!popCurrentLegal) {
                        return;
                    }

                    // We create an array for the SAMPLES of each CURRENT-POP
                    currentPopSamples = new String[currentPopArray.length];
                    hiploidDiploid = new String[currentPopArray.length];
                    adjustedCurrentPopSamples = new String[currentPopArray.length];
                    for (int i = 0; i < currentPopSamples.length; i++) {
                        currentPopSamples[i] = newPopSamples[i];
                        hiploidDiploid[i] = newHiploidDiploid[i];
                        adjustedCurrentPopSamples[i] = newAdjustedCurrentPopSamples[i];
                    }
                }

                for (int i = 0; i < currentPopSamples.length; i++) {
                    adjustedCurrentPopSamples[i] = adjustPopSample(currentPopSamples[i], hiploidDiploid[i]);
                }

                // Taking care of the migbands
                migBandsSourceList.clear();
                migBandsTargetList.clear();
                migBandsIndexList.clear();
                migBandsCounter = 0;
                expectedMigBandsOutputTextArea.setText("");

                // enabeling the modification button
                updateSamplesButton.setEnabled(true);
                updateTauInitialsButton.setEnabled(true);
                expectedAncestralPOPsOutputTextArea.setText("");
                firstTimeCreatingTree = false;

                // We create an array for the TAU-INITIAL of each ANCESTRAL-POP                
                ancestralTauInitial = new String[ancestralPopArray.length];
                for (int i = 0; i < ancestralTauInitial.length; i++) {
                    ancestralTauInitial[i] = "";
                }

                // The user fills the tau-initial on a seperate panel
                popAncestralLegal = InputPanel.insertAncestralTauInitial(ancestralPopArray, ancestralTauInitial);
                if (!popAncestralLegal) {
                    return;
                }
                // Writing the expected output to the text area in the panels

                writeCurrentPopExpectedOutput();
                writeAncestralPopExpectedOutput();

                addNewMigBandButton.setEnabled(true);
                sourceMigBandComboBox.setEnabled(true);
                targetMigBandComboBox.setEnabled(true);

                sourceMigBandComboBox.removeAllItems();
                targetMigBandComboBox.removeAllItems();

                for (int i = 0; i < currentPopArray.length; i++) {
                    sourceMigBandComboBox.addItem(currentPopArray[i].data);
                    targetMigBandComboBox.addItem(currentPopArray[i].data);
                }

                for (int i = 0; i < ancestralPopArray.length; i++) {
                    sourceMigBandComboBox.addItem(ancestralPopArray[i].data);
                    targetMigBandComboBox.addItem(ancestralPopArray[i].data);
                }

            }
        }
    }//GEN-LAST:event_generateTreeInputButtonActionPerformed

    private void InitializeTreeData() {
        if (currentPopArray != null) {
            for (int i = 0; i < currentPopArray.length; i++) {
                currentPopArray[i] = null;
            }
        }

        if (ancestralPopArray != null) {
            for (int i = 0; i < ancestralPopArray.length; i++) {
                ancestralPopArray[i] = null;
            }
        }

        if (currentPopSamples != null) {
            for (int i = 0; i < currentPopSamples.length; i++) {
                currentPopSamples[i] = "";
            }
        }

        if (adjustedCurrentPopSamples != null) {
            for (int i = 0; i < adjustedCurrentPopSamples.length; i++) {
                adjustedCurrentPopSamples[i] = "";
            }
        }

        if (ancestralTauInitial != null) {
            for (int i = 0; i < ancestralTauInitial.length; i++) {
                ancestralTauInitial[i] = "";
            }
        }

        if (hiploidDiploid != null) {
            for (int i = 0; i < hiploidDiploid.length; i++) {
                hiploidDiploid[i] = "";
            }
        }

        migBandsSourceList.clear();
        migBandsTargetList.clear();
        migBandsIndexList.clear();
        migBandsCounter = 0;

        expectedCurrentPOPsOutputTextArea.setText("");
        expectedAncestralPOPsOutputTextArea.setText("");
        updateSamplesButton.setEnabled(false);
        updateTauInitialsButton.setEnabled(false);

        expectedMigBandsOutputTextArea.setText("");
        migBandsStringBuilder = new StringBuilder();
        sourceMigBandComboBox.setEnabled(false);
        targetMigBandComboBox.setEnabled(false);
        sourceMigBandComboBox.removeAllItems();
        targetMigBandComboBox.removeAllItems();
        addNewMigBandButton.setEnabled(false);
        deleteMigBandsButton.setEnabled(false);
        targetMigBandComboBox.setEnabled(false);
    }

    private void writeCurrentPopExpectedOutput() {

        StringBuilder currentPopOutput = new StringBuilder();
        for (int i = 0; i < currentPopArray.length; i++) {
            currentPopOutput.append(
                    "POP-START\n\t"
                    + "name" + TAB + currentPopArray[i].data + "\n\t"
                    + "sample" + TAB + adjustedCurrentPopSamples[i] + "\nPOP-END\n\n"
            );
        }
        expectedCurrentPOPsOutputTextArea.setText(currentPopOutput.toString());

    }

    private void writeAncestralPopExpectedOutput() {
        StringBuilder ancestralPopOutput = new StringBuilder();

        for (int i = 0; i < ancestralPopArray.length; i++) {
            if ("".equals(ancestralTauInitial[i])) {
                ancestralPopOutput.append(
                        "POP-START\n\t" + "name" + TAB + ancestralPopArray[i].data + "\n\t"
                        + "children" + TAB + ancestralPopArray[i].left.data
                        + TAB + ancestralPopArray[i].right.data + "\nPOP-END\n\n"
                );
            } else {
                ancestralPopOutput.append(
                        "POP-START\n\t" + "name" + TAB + ancestralPopArray[i].data + "\n\t"
                        + "children" + TAB + ancestralPopArray[i].left.data
                        + TAB + ancestralPopArray[i].right.data + "\n\t"
                        + "tau-initial" + TAB + ancestralTauInitial[i] + "\nPOP-END\n\n"
                );
            }
        }
        expectedAncestralPOPsOutputTextArea.setText(ancestralPopOutput.toString());

    }

    // Handles if the sample has a few samples...or something
    private String adjustPopSample(String sample, String hiploidDiploid) {
        StringBuilder sb = new StringBuilder();
        char current;
        int spaceCounter = 0;
        for (int i = 0; i < sample.length(); i++) {
            current = sample.charAt(i);
            if (current != ' ') {
                sb.append(current);
                spaceCounter = 0;
            } else if (spaceCounter == 0) {
                sb.append(" " + hiploidDiploid + " ");
                spaceCounter = 1;
            }
        }
        if (spaceCounter == 0) {
            sb.append(" " + hiploidDiploid + " ");
        }
        return sb.toString();
    }


    private void finetuneMigRateFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_finetuneMigRateFieldKeyTyped
        onlyNumericalValueAndDot(evt, finetuneMigRateField);
    }//GEN-LAST:event_finetuneMigRateFieldKeyTyped

    private void finetuneThetaFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_finetuneThetaFieldKeyTyped
        onlyNumericalValueAndDot(evt, finetuneThetaField);
    }//GEN-LAST:event_finetuneThetaFieldKeyTyped

    private void finetuneTauFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_finetuneTauFieldKeyTyped
        onlyNumericalValueAndDot(evt, finetuneTauField);
    }//GEN-LAST:event_finetuneTauFieldKeyTyped

    private void finetuneLocusRateFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_finetuneLocusRateFieldKeyTyped
        onlyNumericalValueAndDot(evt, finetuneLocusRateField);
    }//GEN-LAST:event_finetuneLocusRateFieldKeyTyped

    private void findFinetunesSamplesPerStepFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_findFinetunesSamplesPerStepFieldKeyTyped
        onlyNumericalValue(evt);
    }//GEN-LAST:event_findFinetunesSamplesPerStepFieldKeyTyped

    private void findFinetunesSamplesPerStepFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_findFinetunesSamplesPerStepFieldFocusLost
        focusLost(findFinetunesSamplesPerStepField, "100");
    }//GEN-LAST:event_findFinetunesSamplesPerStepFieldFocusLost

    private void findFinetunesSamplesPerStepFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_findFinetunesSamplesPerStepFieldFocusGained
        focusGained(findFinetunesSamplesPerStepField);
    }//GEN-LAST:event_findFinetunesSamplesPerStepFieldFocusGained

    private void findFinetunesNumStepFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_findFinetunesNumStepFieldKeyTyped
        onlyNumericalValue(evt);
    }//GEN-LAST:event_findFinetunesNumStepFieldKeyTyped

    private void findFinetunesNumStepFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_findFinetunesNumStepFieldFocusLost
        focusLost(findFinetunesNumStepField, "100");
    }//GEN-LAST:event_findFinetunesNumStepFieldFocusLost

    private void findFinetunesNumStepFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_findFinetunesNumStepFieldFocusGained
        focusGained(findFinetunesNumStepField);
    }//GEN-LAST:event_findFinetunesNumStepFieldFocusGained

    private void findFinetunesTrueRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findFinetunesTrueRadioButtonActionPerformed
        // If the TRUE button wasn't marked before and now is, we enable the two following fields
        if (!findFinetunesBool) {
            findFinetunesBool = true;
            findFinetunesNumStepField.setEnabled(findFinetunesBool);
            findFinetunesSamplesPerStepField.setEnabled(findFinetunesBool);
        }
    }//GEN-LAST:event_findFinetunesTrueRadioButtonActionPerformed

    private void findFinetunesFalseRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findFinetunesFalseRadioButtonActionPerformed
        // If the TRUE button was marked before and now isn't, we disable the two following fields
        if (findFinetunesBool) {
            findFinetunesBool = false;
            findFinetunesNumStepField.setEnabled(findFinetunesBool);
            findFinetunesSamplesPerStepField.setEnabled(findFinetunesBool);
        }
    }//GEN-LAST:event_findFinetunesFalseRadioButtonActionPerformed

    private void finetuneMigTimeFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_finetuneMigTimeFieldKeyTyped
        onlyNumericalValueAndDot(evt, finetuneMigTimeField);
    }//GEN-LAST:event_finetuneMigTimeFieldKeyTyped

    private void finetuneCoalTimeFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_finetuneCoalTimeFieldKeyTyped
        onlyNumericalValueAndDot(evt, finetuneCoalTimeField);
    }//GEN-LAST:event_finetuneCoalTimeFieldKeyTyped

    private void chooseLocusMutRateFileFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chooseLocusMutRateFileFieldFocusLost
        focusLost(chooseLocusMutRateFileField, "Choose a locus-mut-rate file");
    }//GEN-LAST:event_chooseLocusMutRateFileFieldFocusLost

    private void chooseLocusMutRateFileFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chooseLocusMutRateFileFieldFocusGained
        focusGained(chooseLocusMutRateFileField);
    }//GEN-LAST:event_chooseLocusMutRateFileFieldFocusGained

    // Choose a locus-mut-rate file
    private void chooseFixedFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseFixedFileButtonActionPerformed
        JFrame parentFrame = new JFrame();
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        int userSelection = fileChooser.showOpenDialog(parentFrame);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            parentDir = fileChooser.getSelectedFile();
            chooseLocusMutRateFileField.setText(parentDir.getAbsolutePath());
            fixedFileChosen = true;
            chooseLocusMutRateFileField.setForeground(java.awt.Color.BLACK);
        }
    }//GEN-LAST:event_chooseFixedFileButtonActionPerformed

    private void locusFixedRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locusFixedRadioButtonActionPerformed
        // If the Fixed button wasn't marked before, and now is, we enable the input file field
        if (!fixedIsChosen) {
            fixedIsChosen = true;
            chooseLocusMutRateFileField.setEnabled(fixedIsChosen);
            chooseFixedFileButton.setEnabled(fixedIsChosen);
        }
    }//GEN-LAST:event_locusFixedRadioButtonActionPerformed

    private void locusVarRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locusVarRadioButtonActionPerformed
        // If the Fixed button was marked before, and now isn't, we disable the input file field
        if (fixedIsChosen) {
            fixedIsChosen = false;
            chooseLocusMutRateFileField.setEnabled(fixedIsChosen);
            chooseFixedFileButton.setEnabled(fixedIsChosen);
        }
    }//GEN-LAST:event_locusVarRadioButtonActionPerformed

    private void locusConstRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locusConstRadioButtonActionPerformed
        // If the Fixed button was marked before, and now isn't, we disable the input file field
        if (fixedIsChosen) {
            fixedIsChosen = false;
            chooseLocusMutRateFileField.setEnabled(fixedIsChosen);
            chooseFixedFileButton.setEnabled(fixedIsChosen);
        }
    }//GEN-LAST:event_locusConstRadioButtonActionPerformed

    private void migRatePrintFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_migRatePrintFieldKeyTyped
        onlyNumericalValueAndDot(evt, migRatePrintField);
    }//GEN-LAST:event_migRatePrintFieldKeyTyped

    private void migRatePrintFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_migRatePrintFieldFocusLost
        focusLost(migRatePrintField, "0.001");
    }//GEN-LAST:event_migRatePrintFieldFocusLost

    private void migRatePrintFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_migRatePrintFieldFocusGained
        focusGained(migRatePrintField);
    }//GEN-LAST:event_migRatePrintFieldFocusGained

    private void migRateBetaFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_migRateBetaFieldKeyTyped
        onlyNumericalValueAndDot(evt, migRateBetaField);
    }//GEN-LAST:event_migRateBetaFieldKeyTyped

    private void migRateBetaFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_migRateBetaFieldFocusLost
        focusLost(migRateBetaField, "0.00001");
    }//GEN-LAST:event_migRateBetaFieldFocusLost

    private void migRateBetaFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_migRateBetaFieldFocusGained
        focusGained(migRateBetaField);
    }//GEN-LAST:event_migRateBetaFieldFocusGained

    private void migRateAlphaFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_migRateAlphaFieldKeyTyped
        onlyNumericalValueAndDot(evt, migRateAlphaField);
    }//GEN-LAST:event_migRateAlphaFieldKeyTyped

    private void migRateAlphaFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_migRateAlphaFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_migRateAlphaFieldActionPerformed

    private void migRateAlphaFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_migRateAlphaFieldFocusLost
        focusLost(migRateAlphaField, "0.002");
    }//GEN-LAST:event_migRateAlphaFieldFocusLost

    private void migRateAlphaFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_migRateAlphaFieldFocusGained
        focusGained(migRateAlphaField);
    }//GEN-LAST:event_migRateAlphaFieldFocusGained

    private void tauThetaPrintFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tauThetaPrintFieldKeyTyped
        onlyNumericalValueAndDot(evt, tauThetaPrintField);
    }//GEN-LAST:event_tauThetaPrintFieldKeyTyped

    private void tauThetaPrintFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tauThetaPrintFieldFocusLost
        focusLost(tauThetaPrintField, "10000");
    }//GEN-LAST:event_tauThetaPrintFieldFocusLost

    private void tauThetaPrintFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tauThetaPrintFieldFocusGained
        focusGained(tauThetaPrintField);
    }//GEN-LAST:event_tauThetaPrintFieldFocusGained

    private void tauThetaBetaFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tauThetaBetaFieldKeyTyped
        onlyNumericalValueAndDot(evt, tauThetaBetaField);
    }//GEN-LAST:event_tauThetaBetaFieldKeyTyped

    private void tauThetaBetaFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tauThetaBetaFieldFocusLost
        focusLost(tauThetaBetaField, "10000");
    }//GEN-LAST:event_tauThetaBetaFieldFocusLost

    private void tauThetaBetaFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tauThetaBetaFieldFocusGained
        focusGained(tauThetaBetaField);
    }//GEN-LAST:event_tauThetaBetaFieldFocusGained

    private void tauThetaAlphaFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tauThetaAlphaFieldKeyTyped
        onlyNumericalValueAndDot(evt, tauThetaAlphaField);
    }//GEN-LAST:event_tauThetaAlphaFieldKeyTyped

    private void tauThetaAlphaFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tauThetaAlphaFieldFocusLost
        focusLost(tauThetaAlphaField, "1");
    }//GEN-LAST:event_tauThetaAlphaFieldFocusLost

    private void tauThetaAlphaFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tauThetaAlphaFieldFocusGained
        focusGained(tauThetaAlphaField);
    }//GEN-LAST:event_tauThetaAlphaFieldFocusGained

    private void logsPerLineFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_logsPerLineFieldKeyTyped
        onlyNumericalValue(evt);
    }//GEN-LAST:event_logsPerLineFieldKeyTyped

    private void logsPerLineFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_logsPerLineFieldFocusLost
        focusLost(logsPerLineField, "100");
    }//GEN-LAST:event_logsPerLineFieldFocusLost

    private void logsPerLineFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_logsPerLineFieldFocusGained
        focusGained(logsPerLineField);
    }//GEN-LAST:event_logsPerLineFieldFocusGained

    private void iterationsPerLogFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_iterationsPerLogFieldKeyTyped
        onlyNumericalValue(evt);
    }//GEN-LAST:event_iterationsPerLogFieldKeyTyped

    private void iterationsPerLogFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_iterationsPerLogFieldFocusLost
        focusLost(iterationsPerLogField, "100");
    }//GEN-LAST:event_iterationsPerLogFieldFocusLost

    private void iterationsPerLogFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_iterationsPerLogFieldFocusGained
        focusGained(iterationsPerLogField);
    }//GEN-LAST:event_iterationsPerLogFieldFocusGained

    private void startMigFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_startMigFieldKeyTyped
        onlyNumericalValue(evt);
    }//GEN-LAST:event_startMigFieldKeyTyped

    private void startMigFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_startMigFieldFocusLost
        focusLost(startMigField, "0");
    }//GEN-LAST:event_startMigFieldFocusLost

    private void startMigFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_startMigFieldFocusGained
        focusGained(startMigField);
    }//GEN-LAST:event_startMigFieldFocusGained

    private void mcmcSampleSkipFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mcmcSampleSkipFieldKeyTyped
        onlyNumericalValue(evt);
    }//GEN-LAST:event_mcmcSampleSkipFieldKeyTyped

    private void mcmcSampleSkipFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mcmcSampleSkipFieldFocusLost
        focusLost(mcmcSampleSkipField, "0");
    }//GEN-LAST:event_mcmcSampleSkipFieldFocusLost

    private void mcmcSampleSkipFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mcmcSampleSkipFieldFocusGained
        focusGained(mcmcSampleSkipField);
    }//GEN-LAST:event_mcmcSampleSkipFieldFocusGained

    private void mcmcIterationsFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mcmcIterationsFieldKeyTyped
        onlyNumericalValue(evt);
    }//GEN-LAST:event_mcmcIterationsFieldKeyTyped

    private void mcmcIterationsFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mcmcIterationsFieldFocusLost
        focusLost(mcmcIterationsField, "300000");
    }//GEN-LAST:event_mcmcIterationsFieldFocusLost

    private void mcmcIterationsFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mcmcIterationsFieldFocusGained
        focusGained(mcmcIterationsField);
    }//GEN-LAST:event_mcmcIterationsFieldFocusGained

    private void burnInFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_burnInFieldKeyTyped
        onlyNumericalValue(evt);
    }//GEN-LAST:event_burnInFieldKeyTyped

    private void burnInFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_burnInFieldFocusLost
        focusLost(burnInField, "0");
    }//GEN-LAST:event_burnInFieldFocusLost

    private void burnInFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_burnInFieldFocusGained
        focusGained(burnInField);
    }//GEN-LAST:event_burnInFieldFocusGained

    private void numLociFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numLociFieldKeyTyped
        onlyNumericalValue(evt);
    }//GEN-LAST:event_numLociFieldKeyTyped

    private void traceFileFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_traceFileFieldFocusLost
        focusLost(traceFileField, "mcmc-trace.out");
    }//GEN-LAST:event_traceFileFieldFocusLost

    private void traceFileFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_traceFileFieldFocusGained
        focusGained(traceFileField);
    }//GEN-LAST:event_traceFileFieldFocusGained

    private void seqFileLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_seqFileLabelMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_seqFileLabelMouseEntered

    private void updateTauInitialsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateTauInitialsButtonActionPerformed
        popAncestralLegal = InputPanel.insertAncestralTauInitial(ancestralPopArray, ancestralTauInitial);
        if (popCurrentLegal && popAncestralLegal) {
            writeAncestralPopExpectedOutput();
        }
    }//GEN-LAST:event_updateTauInitialsButtonActionPerformed

    private void updateSamplesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateSamplesButtonActionPerformed
        popCurrentLegal = InputPanel.insertCurrentLabel(currentPopArray, currentPopSamples, hiploidDiploid);
        if (popCurrentLegal) {
            for (int i = 0; i < currentPopSamples.length; i++) {
                adjustedCurrentPopSamples[i] = adjustPopSample(currentPopSamples[i], hiploidDiploid[i]);
            }
            writeCurrentPopExpectedOutput();
        }
    }//GEN-LAST:event_updateSamplesButtonActionPerformed

    private void expectedCurrentPOPsOutputTextAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_expectedCurrentPOPsOutputTextAreaMouseClicked
        // TODO add your handling code here:
        if (updateSamplesButton.isEnabled()) {
            if (evt.getClickCount() == 2) {
                popCurrentLegal = InputPanel.insertCurrentLabel(currentPopArray, currentPopSamples, hiploidDiploid);
                if (popCurrentLegal) {
                    for (int i = 0; i < currentPopSamples.length; i++) {
                        adjustedCurrentPopSamples[i] = adjustPopSample(currentPopSamples[i], hiploidDiploid[i]);
                    }
                    writeCurrentPopExpectedOutput();
                }
            }
        }
    }//GEN-LAST:event_expectedCurrentPOPsOutputTextAreaMouseClicked

    private void expectedAncestralPOPsOutputTextAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_expectedAncestralPOPsOutputTextAreaMouseClicked
        if (updateTauInitialsButton.isEnabled()) {
            if (evt.getClickCount() == 2) {
                popAncestralLegal = InputPanel.insertAncestralTauInitial(ancestralPopArray, ancestralTauInitial);
                if (popCurrentLegal && popAncestralLegal) {
                    writeAncestralPopExpectedOutput();
                }
            }
        }
    }//GEN-LAST:event_expectedAncestralPOPsOutputTextAreaMouseClicked

    private void openWebManualLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_openWebManualLabelMouseClicked
        OpenWebManual("https://github.com/gphocs-dev/G-PhoCS/blob/master/GPhoCS_Manual.pdf");
    }//GEN-LAST:event_openWebManualLabelMouseClicked

    private void openWebManualLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_openWebManualLabelMouseEntered
        Font font = openWebManualLabel.getFont();
        openWebManualLabel.setFont(new Font(font.getName(), font.getStyle(), font.getSize() + 2));
        openWebManualLabel.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_openWebManualLabelMouseEntered

    private void openWebManualLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_openWebManualLabelMouseExited
        Font font = openWebManualLabel.getFont();
        openWebManualLabel.setFont(new Font(font.getName(), font.getStyle(), font.getSize() - 2));
    }//GEN-LAST:event_openWebManualLabelMouseExited

    private void addNewMigBandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewMigBandButtonActionPerformed
        String[] migBandNewInput = new String[3];
        String sourceMigBand = (String) sourceMigBandComboBox.getSelectedItem();
        String targetMigBand = (String) targetMigBandComboBox.getSelectedItem();
        MigBandsInput.AddNewMigBand(currentPopArray, ancestralPopArray, migBandNewInput, sourceMigBand, targetMigBand);
        if (migBandNewInput[0] != null) {
            migBandsSourceList.add(migBandNewInput[0]);
            migBandsTargetList.add(migBandNewInput[1]);
            migBandsIndexList.add(migBandsCounter);
            migBandsCounter++;

            writeNewMigBand();
            deleteMigBandsButton.setEnabled(true);
        }
    }//GEN-LAST:event_addNewMigBandButtonActionPerformed

    private void deleteMigBandsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMigBandsButtonActionPerformed
        // TODO add your handling code here:
        MigBandsInput.DeleteMigBands(migBandsCounter);
        migBandsCounter = migBandsSourceList.size();
        migBandsStringBuilder = new StringBuilder();
        expectedMigBandsOutputTextArea.setText("");

        writeMigBands();
    }//GEN-LAST:event_deleteMigBandsButtonActionPerformed

    private void CFGLoadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CFGLoadButtonActionPerformed

        // File CFGFile;
        String path = destinationFolderField.getText();

        boolean loadingFileFailed = false;

        String errorMessage = "There was an error while importing the settings. Check the chosen file.";

        try {
            //CFGFile = new File(destinationFolderField.getText());
            //path = destinationFolderField.getText();
            InitializeGeneralFields();
            String[] CFGLinesArray = readLines(path);
            for (int i = 0; i < CFGLinesArray.length; i++) {
                handleLine(CFGLinesArray[i]);
            }
            InitializeTreeData();
            treeField.setText("");
            CheckValidTags(path);
            GetCurrentPopsFromSettings(path);
            GetAncestralPopsFromSettings(path);
        } catch (Exception e) {
            loadingFileFailed = true;
            //              e.printStackTrace();
        } finally {
            if (!loadingFileFailed) {
                //                 JOptionPane.showMessageDialog(null, "General Settings were imported successfuly.", "message", JOptionPane.PLAIN_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, errorMessage, "message", JOptionPane.ERROR_MESSAGE);
                InitializeTreeData();
                return;
            }

            errorMessage = "Error found while constructing the tree from the chosen Control File. Please check your populations.";
            try {
                firstTimeCreatingTree = false;
                CreateBSTNodes();
            } catch (Exception e) {
                loadingFileFailed = true;
                //                    e.printStackTrace();
            } finally {
                if (!loadingFileFailed) {
                } else {
                    JOptionPane.showMessageDialog(null, errorMessage, "message", JOptionPane.ERROR_MESSAGE);
                    InitializeTreeData();
                    return;
                }
            }

            errorMessage = "Error found in one or more of the populations. Please check your CURRENT and ANCESTRAL Pops.";

            try {
                WriteCurrentInField();
                WriteAncestralInField();
            } catch (Exception e) {
                loadingFileFailed = true;
                //                   e.printStackTrace();
            } finally {
                if (!loadingFileFailed) {
                } else {
                    JOptionPane.showMessageDialog(null, errorMessage, "message", JOptionPane.ERROR_MESSAGE);
                    InitializeTreeData();
                    return;
                }

            }

            errorMessage = "Error found in one or more of the populations. Check the samples of the CURRENT-POPs.";
            try {
                ValidateLoadingSettingsHiploidDiploid();
                ValidateLoadingSettingsDuplicateSamples();
            } catch (Exception e) {
                loadingFileFailed = true;
                //        e.printStackTrace();
            } finally {
                if (!loadingFileFailed) {
                } else {
                    JOptionPane.showMessageDialog(null, errorMessage, "message", JOptionPane.ERROR_MESSAGE);
                    InitializeTreeData();
                    return;
                }

            }

            errorMessage = "Error found in one or more of the populations. Check the tau-initial of the ANCESTRAL-POPs";
            try {
                ValidateLoadingSettingsTauInitial();
                ValidateLoadingSettingsTauInitialParentBiggerThanChild();
            } catch (Exception e) {
                loadingFileFailed = true;
                //           e.printStackTrace();
            } finally {
                if (!loadingFileFailed) {
                    writeCurrentPopExpectedOutput();
                    writeAncestralPopExpectedOutput();
                    updateSamplesButton.setEnabled(true);
                    updateTauInitialsButton.setEnabled(true);
                    InitializeMigBands();
                    SetActiveMigBands();
                    AddPopsToMigBands();
                    //                 JOptionPane.showMessageDialog(null, "Tree Settings were loaded successfuly.", "message", JOptionPane.PLAIN_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, errorMessage, "message", JOptionPane.ERROR_MESSAGE);
                    InitializeTreeData();
                }

            }

            errorMessage = "Error found in one or more of the MIG-BANDS.";
            try {
                GetMigBandsFromSettings(path);
            } catch (Exception e) {
                loadingFileFailed = true;
                //           e.printStackTrace();
            } finally {
                if (!loadingFileFailed) {
                } else {
                    JOptionPane.showMessageDialog(null, errorMessage, "message", JOptionPane.ERROR_MESSAGE);
                    InitializeMigBands();
                    SetActiveMigBands();
                    AddPopsToMigBands();
                    return;
                }

            }

            errorMessage = "Error found in one or more of the MIG-BANDS. One of the sources or targets is not a valid POP's name.";
            try {
                CheckValidMigBands();
            } catch (Exception e) {
                loadingFileFailed = true;
                //           e.printStackTrace();
            } finally {
                if (!loadingFileFailed) {
                } else {
                    JOptionPane.showMessageDialog(null, errorMessage, "message", JOptionPane.ERROR_MESSAGE);
                    InitializeMigBands();
                    SetActiveMigBands();
                    AddPopsToMigBands();
                    return;
                }

            }

            errorMessage = "Error found in one or more of the MIG-BANDS. One or more of the Mig-Bands have an identical source and target.";
            try {
                CheckSameSourceTargeteMigBands();
            } catch (Exception e) {
                loadingFileFailed = true;
                //           e.printStackTrace();
            } finally {
                if (!loadingFileFailed) {
                } else {
                    JOptionPane.showMessageDialog(null, errorMessage, "message", JOptionPane.ERROR_MESSAGE);
                    InitializeMigBands();
                    SetActiveMigBands();
                    AddPopsToMigBands();
                    return;
                }

            }

            errorMessage = "Error found in one or more of the MIG-BANDS. Two or more duplicated Mig-Bands.";
            try {
                CheckDuplicateMigBands();
            } catch (Exception e) {
                loadingFileFailed = true;
                //           e.printStackTrace();
            } finally {
                if (!loadingFileFailed) {
                } else {
                    JOptionPane.showMessageDialog(null, errorMessage, "message", JOptionPane.ERROR_MESSAGE);
                    InitializeMigBands();
                    SetActiveMigBands();
                    AddPopsToMigBands();
                    return;
                }

            }

            errorMessage = "Error found in one or more of the MIG-BANDS. Two or more duplicated Mig-Bands.";
            try {
                CheckDuplicateMigBands();
            } catch (Exception e) {
                loadingFileFailed = true;
                //           e.printStackTrace();
            } finally {
                if (!loadingFileFailed) {
                } else {
                    JOptionPane.showMessageDialog(null, errorMessage, "message", JOptionPane.ERROR_MESSAGE);
                    InitializeMigBands();
                    SetActiveMigBands();
                    AddPopsToMigBands();
                    return;
                }

            }

            errorMessage = "Error found in one or more of the MIG-BANDS. One of the Mig-Bands contains an ancestral POP of the other.";
            try {
                CheckFatherChildMigBands();
            } catch (Exception e) {
                loadingFileFailed = true;
                //           e.printStackTrace();
            } finally {
                if (!loadingFileFailed) {
                } else {
                    JOptionPane.showMessageDialog(null, errorMessage, "message", JOptionPane.ERROR_MESSAGE);
                    InitializeMigBands();
                    SetActiveMigBands();
                    AddPopsToMigBands();
                    return;
                }

            }

            errorMessage = "Error found in one or more of the MIG-BANDS. One of the Mig-Bands contains an ancestral POP of the other.";
            try {
                CheckFatherChildMigBands();
            } catch (Exception e) {
                loadingFileFailed = true;
         //       e.printStackTrace();
            } finally {
                if (!loadingFileFailed) {
                } else {
                    JOptionPane.showMessageDialog(null, errorMessage, "message", JOptionPane.ERROR_MESSAGE);
                    InitializeMigBands();
                    SetActiveMigBands();
                    AddPopsToMigBands();
                    return;
                }

            }

            errorMessage = "Found an error while writing the Mig-Bands input to the UI. Check the file's input and try again.";
            try {
                MigBandsWriteToUI();
            } catch (Exception e) {
                loadingFileFailed = true;
      //          e.printStackTrace();
            } finally {
                if (!loadingFileFailed) {
                    //               JOptionPane.showMessageDialog(null, "Mig-Bands Settings were loaded successfuly.", "message", JOptionPane.PLAIN_MESSAGE);
                    JOptionPane.showMessageDialog(null, "File Settings were loaded successfuly", "message", JOptionPane.PLAIN_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, errorMessage, "message", JOptionPane.ERROR_MESSAGE);
                    InitializeMigBands();
                    SetActiveMigBands();
                    AddPopsToMigBands();
                    return;
                }

            }
        }
    }//GEN-LAST:event_CFGLoadButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void generateFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateFileButtonActionPerformed

        boolean executionFailed = false;

        // Checking for errors in the General section of the form.
        if (checkInputForErrors()) {
            // If there was any error, a message was sent to the user and the
            // operation stops.
            return;
        }

        BufferedWriter output = null;
        File file;
        try {
            if (!"".equals(destinationFolderField.getText())) {
                parentDir = new File(destinationFolderName);
                if (parentDir.isDirectory()) {
                    file = new File(destinationFolderField.getText());
                } else {
                    //Make a warning and cancel the execution.
                    executionFailed = true;
                    return;
                }
            } else {
                file = new File("control-file");
            }

            output = new BufferedWriter(new FileWriter(file));

            // Write the General-Info to the control file
            writeGeneralInfo(output);

            output.newLine();
            output.newLine();
            output.newLine();

            // Writing the current-pops to the control file
            writeCurrentPops(output, currentPopArray);
            // Writing the ancestral-pops to the control file
            writeAncestralPops(output, ancestralPopArray);

            // Checking if any mig-bands were inserted. If not, we skip it
            if (migBandsSourceList.size() != 0) {
                // If there are any, we write them as well
                writeMigBands(output);
            }

        } catch (Exception e) {
            executionFailed = true;
    //        e.printStackTrace();
        } finally {
            if (!executionFailed) {
                JOptionPane.showMessageDialog(null, "Control file was successfully saved", "message", JOptionPane.PLAIN_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Error in creating the Control File. Check the file's path.", "message", JOptionPane.ERROR_MESSAGE);
            }
            if (output != null) {
                try {
                    output.close();
                } catch (IOException ex) {
                    Logger.getLogger(ControlFileGeneratorUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_generateFileButtonActionPerformed

    // Choose a destination folder for the output control file
    private void chooseDestinationFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseDestinationFolderButtonActionPerformed
        JFrame parentFrame = new JFrame();
        JFileChooser fileChooser = new JFileChooser();
        if(destFolder != null)
        {
            fileChooser.setCurrentDirectory(destFolder);
        }
        // Demonstrate "Save" dialog:
        int rVal = fileChooser.showSaveDialog(parentFrame);
        if (rVal == JFileChooser.APPROVE_OPTION) {
            selectedFile = fileChooser.getSelectedFile();
            String path = selectedFile.getAbsolutePath();
            destinationFolderField.setText(path);
            fileName = fileChooser.getSelectedFile().getName();
            destFolder = fileChooser.getCurrentDirectory();
            destinationFolderName = destFolder.toString();
        }

    }//GEN-LAST:event_chooseDestinationFolderButtonActionPerformed

    private String[] readLines(String filename) throws Exception {
        FileReader fileReader = new FileReader(filename);
        BufferedReader bufferedReader = new BufferedReader(fileReader);
        ArrayList<String> lines = new ArrayList<String>();
        String line = null;
        while ((line = bufferedReader.readLine()) != null) {
            lines.add(line);
        }
        bufferedReader.close();
        return lines.toArray(new String[lines.size()]);
    }

    private void CreateBSTNodes() throws Exception {
        ArrayList<BSTNode> nodesList = new ArrayList<BSTNode>();
        for (int i = 0; i < currentPopsFromLoadedSettingsNAMES.size(); i++) {
            nodesList.add(new BSTNode(currentPopsFromLoadedSettingsNAMES.get(i)));
        }
        for (int i = 0; i < ancestralPopsFromLoadedSettingsNAMES.size(); i++) {
            nodesList.add(new BSTNode(ancestralPopsFromLoadedSettingsNAMES.get(i)));
        }

        for (int i = 0; i < nodesList.size(); i++) {
            BSTNode curNode = nodesList.get(i);
            BSTNode leftNode = null;
            BSTNode rightNode = null;
            String data = curNode.data;
            for (int j = 0; j < ancestralPopsFromLoadedSettingsNAMES.size(); j++) {
                if (data.equals(ancestralPopsFromLoadedSettingsNAMES.get(j))) {
                    String leftData = ancestralPopsFromLoadedSettingsCHILDREN.get(j).get(0);
                    String rightData = ancestralPopsFromLoadedSettingsCHILDREN.get(j).get(1);
                    for (int h = 0; h < nodesList.size(); h++) {
                        if (leftData.equals(nodesList.get(h).data)) {
                            leftNode = nodesList.get(h);
                        }
                        if (rightData.equals(nodesList.get(h).data)) {
                            rightNode = nodesList.get(h);
                        }
                    }
                    
                }
            }
            
            curNode.setChildren(leftNode, rightNode);
            if (leftNode != null) {
                leftNode.setParent(curNode);
            }
            if (rightNode != null) {
                rightNode.setParent(curNode);
            }
            
        }

        int curNum = 0;
        int parentNum = 0;
        for (int i = 0; i < nodesList.size(); i++) {
            BSTNode node = nodesList.get(i);
            if (node.left == null) {
                curNum++;
            } else {
                parentNum++;
            }
        }

        BSTNode[] settingsChildrenArray = new BSTNode[curNum];
        BSTNode[] settingsParentsArray = new BSTNode[parentNum];
        int counter = 0;
        int nodeCounter = 0;
        while (counter < curNum && nodeCounter < nodesList.size()) {
            BSTNode node = nodesList.get(nodeCounter);
            if (node.left == null) {
                settingsChildrenArray[counter] = node;
                counter++;
            }
            nodeCounter++;
        }

        counter = 0;
        nodeCounter = 0;
        while (counter < curNum && nodeCounter < nodesList.size()) {
            BSTNode node = nodesList.get(nodeCounter);
            if (node.left != null) {
                settingsParentsArray[counter] = node;
                counter++;
            }
            nodeCounter++;
        }

        nwtCreate = new NewickTree(settingsChildrenArray, settingsParentsArray);

    }

    //Going over the tags to see they are all valid
    private void CheckValidTags(String filename) throws Exception {
        FileReader fileReader = new FileReader(filename);
        BufferedReader bufferedReader = new BufferedReader(fileReader);
        String line = null;
        Exception e = new Exception();
        boolean curPopsStartTag = false;
        boolean curPopsEndTag = false;
        boolean ancPopsStartTag = false;
        boolean ancPopsEndTag = false;
        boolean migBandsStartTag = false;
        boolean migBandsEndTag = false;
        boolean migBandsEndBeforeStartTag = false;
        while ((line = bufferedReader.readLine()) != null) {
            if (line.toLowerCase().contains("CURRENT-POPS-START".toLowerCase())) {
                curPopsStartTag = true;
            }
            if (line.toLowerCase().contains("CURRENT-POPS-END".toLowerCase()) && curPopsStartTag) {
                curPopsEndTag = true;
            }
            if (line.toLowerCase().contains("ANCESTRAL-POPS-START".toLowerCase())) {
                ancPopsStartTag = true;
            }
            if (line.toLowerCase().contains("ANCESTRAL-POPS-END".toLowerCase()) && ancPopsStartTag) {
                ancPopsEndTag = true;
            }
            if (line.toLowerCase().contains("MIG-BANDS-START".toLowerCase())) {
                migBandsStartTag = true;
            }
            if (line.toLowerCase().contains("MIG-BANDS-END".toLowerCase()) && migBandsStartTag) {
                migBandsEndTag = true;
            }
            if (line.toLowerCase().contains("MIG-BANDS-END".toLowerCase()) && !migBandsStartTag) {
                migBandsEndBeforeStartTag = true;
            }
        }
        
        if(!curPopsStartTag || !curPopsEndTag || !ancPopsStartTag || !ancPopsEndTag)
        {
            throw e;
        }
        if(migBandsEndBeforeStartTag)
        {
            throw e;
        }
        if(migBandsStartTag && !migBandsEndTag)
        {
            throw e;
        }
    }
    // Reading the CURRENT POPs from the Settings file
    private void GetCurrentPopsFromSettings(String filename) throws IOException {
        FileReader fileReader = new FileReader(filename);
        BufferedReader bufferedReader = new BufferedReader(fileReader);
        currentPopsFromLoadedSettingsNAMES.clear();
        currentPopsFromLoadedSettingsSAMPLES.clear();
        String[] lineArray;
        ArrayList<String> samplesLinkedList = new ArrayList<String>();
        String line = null;
        while ((line = bufferedReader.readLine()) != null) {
            if (line.toLowerCase().contains("CURRENT-POPS-START".toLowerCase())) {
                while ((line = bufferedReader.readLine()) != null && !(line.toLowerCase().contains("CURRENT-POPS-END".toLowerCase()))) {
                    if (line.toLowerCase().contains("POP-START".toLowerCase())) {
                        boolean currentPopSectionName = false;
                        boolean currentPopSectionSamples = false;
                        String currentPopNameString = "";
                        ArrayList<String> currentPopSamplesString = new ArrayList<String>();
                        while ((line = bufferedReader.readLine()) != null && !(line.toLowerCase().contains("POP-END".toLowerCase()))) {
                            if (line.toLowerCase().contains("name".toLowerCase())) {
                                lineArray = line.split("\\s+");
                                for (int i = 0; i < lineArray.length; i++) {
                                    if (lineArray[i].toLowerCase().equals("name".toLowerCase())) {
                                        if (i + 1 != lineArray.length) {
                                            currentPopNameString = lineArray[i+1];
                                            currentPopSectionName = true;
                                            //currentPopsFromLoadedSettingsNAMES.add(lineArray[i + 1]);
                                        }
                                    }
                                }
                            }

                            if (line.toLowerCase().contains("samples".toLowerCase())) {
                                samplesLinkedList = new ArrayList<String>();
                                lineArray = line.split("\\s+");
                                for (int i = 0; i < lineArray.length; i++) {
                                    if (lineArray[i].toLowerCase().equals("samples".toLowerCase())) {
                                        for (int j = i + 1; j < lineArray.length; j++) {
                                            samplesLinkedList.add(lineArray[j]);
                                        }
                                        currentPopSamplesString = samplesLinkedList;
                                        currentPopSectionSamples = true;
                                        //currentPopsFromLoadedSettingsSAMPLES.add(samplesLinkedList);
                                    }
                                }
                            }
                            
                            if(currentPopSectionName && currentPopSectionSamples) {
                                currentPopsFromLoadedSettingsNAMES.add(currentPopNameString);
                                currentPopsFromLoadedSettingsSAMPLES.add(currentPopSamplesString);
                                break;
                            }
                        }
                    }
                }
            }
        }

        bufferedReader.close();
    }

    // Reading the ANCESTRAL POPs from the settings file
    private void GetAncestralPopsFromSettings(String filename) throws IOException {
        FileReader fileReader = new FileReader(filename);
        BufferedReader bufferedReader = new BufferedReader(fileReader);
        ancestralPopsFromLoadedSettingsNAMES.clear();
        ancestralPopsFromLoadedSettingsCHILDREN.clear();
        ancestralPopsFromLoadedSettingsTAU.clear();
        String[] lineArray;
        ArrayList<String> childrenLinkedList = new ArrayList<String>();
        String line = null;
        while ((line = bufferedReader.readLine()) != null) {
            if (line.toLowerCase().contains("ANCESTRAL-POPS-START".toLowerCase())) {
                while ((line = bufferedReader.readLine()) != null && !(line.toLowerCase().contains("ANCESTRAL-POPS-END".toLowerCase()))) {
                    if (line.toLowerCase().contains("POP-START".toLowerCase())) {
                        while ((line = bufferedReader.readLine()) != null && !(line.toLowerCase().contains("POP-END".toLowerCase()))) {
                            if (line.toLowerCase().contains("name".toLowerCase())) {
                                lineArray = line.split("\\s+");
                                for (int i = 0; i < lineArray.length; i++) {
                                    if (lineArray[i].toLowerCase().equals("name".toLowerCase())) {
                                        if (i + 1 != lineArray.length) {
                                            ancestralPopsFromLoadedSettingsNAMES.add(lineArray[i + 1]);
                                        }
                                    }
                                }
                            }

                            if (line.toLowerCase().contains("children".toLowerCase())) {
                                childrenLinkedList = new ArrayList<String>();
                                lineArray = line.split("\\s+");
                                for (int i = 0; i < lineArray.length; i++) {
                                    if (lineArray[i].toLowerCase().equals("children".toLowerCase())) {
                                        for (int j = i + 1; j < lineArray.length; j++) {
                                            childrenLinkedList.add(lineArray[j]);
                                        }
                                        ancestralPopsFromLoadedSettingsCHILDREN.add(childrenLinkedList);
                                    }
                                }
                            }

                            if (line.toLowerCase().contains("tau-initial".toLowerCase())) {
                                lineArray = line.split("\\s+");
                                for (int i = 0; i < lineArray.length; i++) {
                                    if (lineArray[i].toLowerCase().equals("tau-initial".toLowerCase())) {
                                        if (i + 1 != lineArray.length) {
                                            ancestralPopsFromLoadedSettingsTAU.add(lineArray[i + 1]);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        bufferedReader.close();
    }
    
    // Reading the CURRENT POPs from the Settings file
    private void GetMigBandsFromSettings(String filename) throws IOException {
        FileReader fileReader = new FileReader(filename);
        BufferedReader bufferedReader = new BufferedReader(fileReader);
        sorcesMigBandsFromLoadedSettingsNAMES.clear();
        targetsMigBandsFromLoadedSettingsNAMES.clear();
        String[] lineArray;
        ArrayList<String> samplesLinkedList = new ArrayList<String>();
        String line = null;
        while ((line = bufferedReader.readLine()) != null) {
            if (line.toLowerCase().contains("MIG-BANDS-START".toLowerCase())) {
                while ((line = bufferedReader.readLine()) != null && !(line.toLowerCase().contains("MIG-BANDS-END".toLowerCase()))) {
                    if (line.toLowerCase().contains("BAND-START".toLowerCase())) {
                        boolean currentBandSectionSource = false;
                        boolean currentBandSectiontarget = false;
                        String currentBandSourceString = "";
                        String currentBandTargetString = "";
                        while ((line = bufferedReader.readLine()) != null && !(line.toLowerCase().contains("BAND-END".toLowerCase()))) {
                            if (line.toLowerCase().contains("source".toLowerCase())) {
                                lineArray = line.split("\\s+");
                                for (int i = 0; i < lineArray.length; i++) {
                                    if (lineArray[i].toLowerCase().equals("source".toLowerCase())) {
                                        if (i + 1 != lineArray.length) {
                                            currentBandSourceString = lineArray[i+1];
                                            currentBandSectionSource = true;
                                            //currentPopsFromLoadedSettingsNAMES.add(lineArray[i + 1]);
                                        }
                                    }
                                }
                            }
                            
                            if (line.toLowerCase().contains("target".toLowerCase())) {
                                lineArray = line.split("\\s+");
                                for (int i = 0; i < lineArray.length; i++) {
                                    if (lineArray[i].toLowerCase().equals("target".toLowerCase())) {
                                        if (i + 1 != lineArray.length) {
                                            currentBandTargetString = lineArray[i+1];
                                            currentBandSectiontarget = true;
                                            //currentPopsFromLoadedSettingsNAMES.add(lineArray[i + 1]);
                                        }
                                    }
                                }
                            }
                            
                            if(currentBandSectionSource && currentBandSectiontarget) {
                                sorcesMigBandsFromLoadedSettingsNAMES.add(currentBandSourceString);
                                targetsMigBandsFromLoadedSettingsNAMES.add(currentBandTargetString);
                                break;
                            }
                        }
                    }
                }
            }
        }

        bufferedReader.close();
    }

    private void WriteCurrentInField() throws Exception {

        currentPopArray = nwtCreate.childArray;

        String[] newPopSamples = new String[currentPopArray.length];
        String[] newAdjustedCurrentPopSamples = new String[currentPopArray.length];
        hiploidDiploid = new String[newAdjustedCurrentPopSamples.length];
        for (int i = 0; i < newPopSamples.length; i++) {
            newPopSamples[i] = "";
            newAdjustedCurrentPopSamples[i] = "";
        }

        for (int i = 0; i < currentPopArray.length; i++) {
            StringBuilder sb = new StringBuilder();
            for(int j = 0; j < currentPopsFromLoadedSettingsSAMPLES.get(i).size(); j++) {
                if(j % 2 == 0) {
                    sb.append(currentPopsFromLoadedSettingsSAMPLES.get(i).get(j));
                    if (j + 2 < currentPopsFromLoadedSettingsSAMPLES.get(i).size()) {
                        sb.append(" ");
                    }
                }
            }
            newPopSamples[i] = sb.toString();
            sb = new StringBuilder();
            for (int j = 0; j < currentPopsFromLoadedSettingsSAMPLES.get(i).size(); j++) {
                sb.append(currentPopsFromLoadedSettingsSAMPLES.get(i).get(j));
                if (j + 1 < currentPopsFromLoadedSettingsSAMPLES.get(i).size()) {
                    sb.append(" ");
                }
            }
            newAdjustedCurrentPopSamples[i] = sb.toString();
        }
        // We create an array for the SAMPLES of each CURRENT-POP
        currentPopSamples = new String[currentPopArray.length];
        adjustedCurrentPopSamples = new String[currentPopArray.length];
        for (int i = 0; i < currentPopSamples.length; i++) {
            currentPopSamples[i] = newPopSamples[i];
            adjustedCurrentPopSamples[i] = newAdjustedCurrentPopSamples[i];
        }
    }

    private void WriteAncestralInField() throws Exception{
        ancestralPopArray = nwtCreate.parentArray;
        ancestralTauInitial = new String[ancestralPopArray.length];
        for (int i = 0; i < ancestralTauInitial.length; i++) {
            ancestralTauInitial[i] = "";
        }
        for (int i = 0; i < ancestralTauInitial.length; i++) {
            ancestralTauInitial[i] = ancestralPopsFromLoadedSettingsTAU.get(i);
        }
    }

    private void ValidateLoadingSettingsHiploidDiploid() throws Exception {
        int samples = adjustedCurrentPopSamples.length;
        for (int i = 0; i < samples; i++) {
            String[] sampleArray = adjustedCurrentPopSamples[i].split("\\s+");
            Exception e = new Exception();
            int sampleLength = sampleArray.length;
            if (sampleLength % 2 != 0) {
                throw e;
            }
            for (int j = 0; j < sampleLength; j++) {
                if (j % 2 != 0) {
                    if (!(sampleArray[j].equals("d") || sampleArray[j].equals("h"))) {
                        throw e;
                    }
                }
                hiploidDiploid[i] = sampleArray[j];
            }
        }
        
        for(int i = 0; i < hiploidDiploid.length; i++) {
        }
    }
    
    private void ValidateLoadingSettingsDuplicateSamples() throws Exception {
        int samples = adjustedCurrentPopSamples.length;
        ArrayList<String> samplesList = new ArrayList<String>();
        Exception e = new Exception();
        for (int i = 0; i < samples; i++) {
            String[] sampleArray = adjustedCurrentPopSamples[i].split("\\s+");
            int sampleLength = sampleArray.length;
            for (int j = 0; j < sampleLength; j++) {
                if (j % 2 == 0) {
                    samplesList.add(sampleArray[j]);
                }
            }
        }
        
        for(int i = 0; i < samplesList.size(); i++) {
            for(int j = 0; j < samplesList.size(); j++) {
                if(i != j) {
                    if(samplesList.get(i).equals(samplesList.get(j))) {
                        throw e;
                    }
                }
            }
        }
    }
    
    private void ValidateLoadingSettingsTauInitial() throws Exception{
        Exception e = new Exception();
        for(int i = 0; i < ancestralTauInitial.length; i++) {
            if(!Validate.validateDouble(ancestralTauInitial[i])) {
                throw e;
            }
        }
    }
    
    private void ValidateLoadingSettingsTauInitialParentBiggerThanChild() throws Exception{
        Exception e = new Exception();
        for(int i = 0; i < ancestralPopArray.length; i++) {
            BSTNode curNode = ancestralPopArray[i];
            BSTNode left = curNode.left;
            BSTNode right = curNode.right;
            double currentTau = Double.parseDouble(ancestralTauInitial[i]);
            for(int j = 0; j < ancestralPopArray.length; j++) {
                BSTNode secNode = ancestralPopArray[j];
                if(left.data.equals(secNode.data) || right.data.equals(secNode.data)) {
                    double childTau = Double.parseDouble(ancestralTauInitial[j]);
                    if(currentTau < childTau)
                        throw e;
                }
            }
        }
    }

    private void InitializeMigBands() {
        sourceMigBandComboBox.setEnabled(false);
        targetMigBandComboBox.setEnabled(false);
        addNewMigBandButton.setEnabled(false);
        deleteMigBandsButton.setEnabled(false);
        sourceMigBandComboBox.removeAllItems();
        targetMigBandComboBox.removeAllItems();
        migBandsSourceList.clear();
        migBandsTargetList.clear();
        migBandsIndexList.clear();
        migBandsCounter = 0;
        expectedMigBandsOutputTextArea.setText("");
        sorcesMigBandsFromLoadedSettingsNAMES.clear();
        targetsMigBandsFromLoadedSettingsNAMES.clear();
        
    }
    
    private void SetActiveMigBands() {
        sourceMigBandComboBox.setEnabled(true);
        targetMigBandComboBox.setEnabled(true);
        addNewMigBandButton.setEnabled(true);
//        deleteMigBandsButton.setEnabled(true);
    }
    
    private void AddPopsToMigBands() {
        for (int i = 0; i < currentPopArray.length; i++) {
            sourceMigBandComboBox.addItem(currentPopArray[i].data);
            targetMigBandComboBox.addItem(currentPopArray[i].data);
        }

        for (int i = 0; i < ancestralPopArray.length; i++) {
            sourceMigBandComboBox.addItem(ancestralPopArray[i].data);
            targetMigBandComboBox.addItem(ancestralPopArray[i].data);
        }
    }
    
    private void CheckValidMigBands() throws Exception {
        
        Exception e = new Exception();
        for(int i = 0; i < sorcesMigBandsFromLoadedSettingsNAMES.size(); i++) {
            boolean exists = false;
            for(int j = 0; j < ancestralPopArray.length; j++) {
                if(sorcesMigBandsFromLoadedSettingsNAMES.get(i).equals(ancestralPopArray[j].data)) {
                    exists = true;
                }
            }
            for(int j = 0; j < currentPopArray.length; j++) {
                if(sorcesMigBandsFromLoadedSettingsNAMES.get(i).equals(currentPopArray[j].data)) {
                    exists = true;
                }
            }
            if(!exists) {
                throw e;
            }
        }
        
        for(int i = 0; i < targetsMigBandsFromLoadedSettingsNAMES.size(); i++) {
            boolean exists = false;
            for(int j = 0; j < ancestralPopArray.length; j++) {
                if(targetsMigBandsFromLoadedSettingsNAMES.get(i).equals(ancestralPopArray[j].data)) {
                    exists = true;
                }
            }
            for(int j = 0; j < currentPopArray.length; j++) {
                if(targetsMigBandsFromLoadedSettingsNAMES.get(i).equals(currentPopArray[j].data)) {
                    exists = true;
                }
            }
            if(!exists) {
                throw e;
            }
        }
    }
    
    private void CheckSameSourceTargeteMigBands() throws Exception {
        Exception e = new Exception();
        for(int i = 0; i < sorcesMigBandsFromLoadedSettingsNAMES.size(); i++) {
            if(sorcesMigBandsFromLoadedSettingsNAMES.get(i).equals(targetsMigBandsFromLoadedSettingsNAMES.get(i))) {
                throw e;
            }
        }
    }
    
    private void CheckDuplicateMigBands() throws Exception {
        Exception e = new Exception();
        for(int i = 0; i < sorcesMigBandsFromLoadedSettingsNAMES.size(); i++) {
            String curSource = sorcesMigBandsFromLoadedSettingsNAMES.get(i);
            String curTarget = targetsMigBandsFromLoadedSettingsNAMES.get(i);
            for(int j = 0; j < sorcesMigBandsFromLoadedSettingsNAMES.size(); j++) {
                if (i != j) {
                    if(sorcesMigBandsFromLoadedSettingsNAMES.get(j).equals(curSource) && targetsMigBandsFromLoadedSettingsNAMES.get(j).equals(curTarget))
                        throw e;
                    
                }
            }
        }
    }
    
    private void CheckFatherChildMigBands() throws Exception {
        Exception e = new Exception();
        for(int i = 0; i < sorcesMigBandsFromLoadedSettingsNAMES.size(); i++) {
            String curSource = sorcesMigBandsFromLoadedSettingsNAMES.get(i);
            String curTarget = targetsMigBandsFromLoadedSettingsNAMES.get(i);
            BSTNode sourceBST = new BSTNode();
            BSTNode tempSource = new BSTNode();
            BSTNode targetBST = new BSTNode();
            BSTNode tempTarget = new BSTNode();
            for(int j = 0; j < nwtCreate.childArray.length; j++) {
                if(nwtCreate.childArray[j].data.equals(curSource)) {
                    sourceBST = nwtCreate.childArray[j];
                    tempSource = nwtCreate.childArray[j];
                }
                if(nwtCreate.childArray[j].data.equals(curTarget)) {
                    targetBST = nwtCreate.childArray[j];
                    tempTarget = nwtCreate.childArray[j];
                }
            }
            for(int j = 0; j < nwtCreate.parentArray.length; j++) {
                if(nwtCreate.parentArray[j].data.equals(curSource)) {
                    sourceBST = nwtCreate.parentArray[j];
                    tempSource = nwtCreate.parentArray[j];
                }
                if(nwtCreate.parentArray[j].data.equals(curTarget)) {
                    targetBST = nwtCreate.parentArray[j];
                    tempTarget = nwtCreate.parentArray[j];
                }
            }
            
            while(tempSource != null) {
                if(tempSource.data.equals(targetBST.data)) {
                    throw e;
                }
                tempSource = tempSource.parent;
            }
            
            while(tempTarget != null) {
                if(tempTarget.data.equals(sourceBST.data)) {
                    throw e;
                }
                tempTarget = tempTarget.parent;
            }
            
        }
        
    }
    
        
    private void MigBandsWriteToUI() throws Exception{
        for(int i = 0; i < sorcesMigBandsFromLoadedSettingsNAMES.size(); i++) {
            migBandsSourceList.add(sorcesMigBandsFromLoadedSettingsNAMES.get(i));
            migBandsTargetList.add(targetsMigBandsFromLoadedSettingsNAMES.get(i));
            migBandsIndexList.add(i);
        }
        migBandsCounter = migBandsSourceList.size();
        deleteMigBandsButton.setEnabled(true);
        writeMigBands();
    }
    
    
    private void InitializeGeneralFields() throws Exception {
        seqFileField.setText("");
        traceFileField.setText("");
        numLociField.setText("");
        burnInField.setText("");
        mcmcIterationsField.setText("");
        mcmcSampleSkipField.setText("");
        startMigField.setText("");
        iterationsPerLogField.setText("");
        logsPerLineField.setText("");
        tauThetaPrintField.setText("");
        tauThetaAlphaField.setText("");
        tauThetaBetaField.setText("");
        migRatePrintField.setText("");
        migRateAlphaField.setText("");
        migRateBetaField.setText("");
        locusConstRadioButton.setSelected(true);
        fixedIsChosen = false;
        chooseLocusMutRateFileField.setEnabled(fixedIsChosen);
        chooseFixedFileButton.setEnabled(fixedIsChosen);
        findFinetunesTrueRadioButton.setSelected(true);
        findFinetunesBool = true;
        findFinetunesNumStepField.setEnabled(findFinetunesBool);
        findFinetunesSamplesPerStepField.setEnabled(findFinetunesBool);
        findFinetunesNumStepField.setText("");
        findFinetunesSamplesPerStepField.setText("");
        finetuneCoalTimeField.setText("");
        finetuneMigTimeField.setText("");
        finetuneThetaField.setText("");
        finetuneMigRateField.setText("");
        finetuneTauField.setText("");
        finetuneLocusRateField.setText("");
        finetuneMixingField.setText("");
        
    }
    
    private void handleLine(String line) throws Exception {
        String[] lineArray = line.split("\\s+");
        String tag, fieldText;
        if(lineArray.length == 0) return;
        if (lineArray.length == 1) {
            tag = lineArray[0];
            if ("no-mixing".equals(tag)) {
                noMixingCheckBox.setSelected(true);
            }
            return;
        }
        if (lineArray.length == 2) {
            if(lineArray[0].equals("#") || lineArray[1].equals("#"))
                return;
            tag = lineArray[1];
            if ("no-mixing".equals(tag)) {
                noMixingCheckBox.setSelected(true);
            }
            return;
        }

        if (lineArray.length > 2 && lineArray[0].equals("")) {
            if(lineArray[0].equals("#") || lineArray[1].equals("#"))
                return;
            lineArray[0] = lineArray[1];
            lineArray[1] = lineArray[2];
            if (lineArray.length > 3) {
                lineArray[2] = lineArray[3];
            }
        }

        if(lineArray[0].equals("#") || lineArray[1].equals("#"))
            return;
        
        tag = lineArray[0];
        fieldText = lineArray[1];

        if ("seq-file".equals(tag)) {
            seqFileField.setText(fieldText);
        } else if ("trace-file".equals(tag)) {
            traceFileField.setText(fieldText);
            traceFileField.setForeground(Color.black);
        } else if ("num-loci".equals(tag)) {
            numLociField.setText(fieldText);
        } else if ("random-seed".equals(tag)) {
            randomSeedField.setText(fieldText);
        } else if ("burn-in".equals(tag)) {
            burnInField.setText(fieldText);
            burnInField.setForeground(Color.black);
        } else if ("mcmc-iterations".equals(tag)) {
            mcmcIterationsField.setText(fieldText);
            mcmcIterationsField.setForeground(Color.black);
        } else if ("mcmc-sample-skip".equals(tag)) {
            mcmcSampleSkipField.setText(fieldText);
            mcmcSampleSkipField.setForeground(Color.black);
        } else if ("start-mig".equals(tag)) {
            startMigField.setText(fieldText);
            startMigField.setForeground(Color.black);
        } else if ("iterations-per-log".equals(tag)) {
            iterationsPerLogField.setText(fieldText);
            iterationsPerLogField.setForeground(Color.black);
        } else if ("logs-per-line".equals(tag)) {
            logsPerLineField.setText(fieldText);
            logsPerLineField.setForeground(Color.black);
        } else if ("tau-theta-print".equals(tag)) {
            tauThetaPrintField.setText(fieldText);
            tauThetaPrintField.setForeground(Color.black);
        } else if ("tau-theta-alpha".equals(tag)) {
            tauThetaAlphaField.setText(fieldText);
            tauThetaAlphaField.setForeground(Color.black);
        } else if ("tau-theta-beta".equals(tag)) {
            tauThetaBetaField.setText(fieldText);
            tauThetaBetaField.setForeground(Color.black);
        } else if ("mig-rate-print".equals(tag)) {
            migRatePrintField.setText(fieldText);
            migRatePrintField.setForeground(Color.black);
        } else if ("mig-rate-alpha".equals(tag)) {
            migRateAlphaField.setText(fieldText);
            migRateAlphaField.setForeground(Color.black);
        } else if ("mig-rate-beta".equals(tag)) {
            migRateBetaField.setText(fieldText);
            migRateBetaField.setForeground(Color.black);
        } else if ("locus-mut-rate".equals(tag)) {
            if ("CONST".equals(fieldText)) {
                locusConstRadioButton.setSelected(true);
                fixedIsChosen = false;
                chooseLocusMutRateFileField.setEnabled(fixedIsChosen);
                chooseFixedFileButton.setEnabled(fixedIsChosen);
            } else if ("VAR".equals(fieldText)) {
                locusVarRadioButton.setSelected(true);
                fixedIsChosen = false;
                chooseLocusMutRateFileField.setEnabled(fixedIsChosen);
                chooseFixedFileButton.setEnabled(fixedIsChosen);
            } else if ("FIXED".equals(fieldText)) {
                locusFixedRadioButton.setSelected(true);
                chooseLocusMutRateFileField.setText(lineArray[2]);
                chooseLocusMutRateFileField.setForeground(Color.black);
                fixedIsChosen = true;
                chooseLocusMutRateFileField.setEnabled(fixedIsChosen);
                chooseFixedFileButton.setEnabled(fixedIsChosen);
            }
        } else if ("find-finetunes".equals(tag)) {
            if ("TRUE".equals(fieldText)) {
                findFinetunesTrueRadioButton.setSelected(true);
                findFinetunesBool = true;
                findFinetunesNumStepField.setEnabled(findFinetunesBool);
                findFinetunesSamplesPerStepField.setEnabled(findFinetunesBool);
            } else if ("FALSE".equals(fieldText)) {
                findFinetunesBool = false;
                findFinetunesNumStepField.setEnabled(findFinetunesBool);
                findFinetunesSamplesPerStepField.setEnabled(findFinetunesBool);
            }
        } else if ("find-finetunes-num-steps".equals(tag)) {
            findFinetunesNumStepField.setText(fieldText);
            findFinetunesNumStepField.setForeground(Color.black);
        } else if ("find-finetunes-samples-per-step".equals(tag)) {
            findFinetunesSamplesPerStepField.setText(fieldText);
            findFinetunesSamplesPerStepField.setForeground(Color.black);
        } else if ("finetune-coal-time".equals(tag)) {
            finetuneCoalTimeField.setText(fieldText);
        } else if ("finetune-mig-time".equals(tag)) {
            finetuneMigTimeField.setText(fieldText);
        } else if ("finetune-theta".equals(tag)) {
            finetuneThetaField.setText(fieldText);
        } else if ("finetune-mig-rate".equals(tag)) {
            finetuneMigRateField.setText(fieldText);
        } else if ("finetune-tau".equals(tag)) {
            finetuneTauField.setText(fieldText);
        } else if ("finetune-locus-rate".equals(tag)) {
            finetuneLocusRateField.setText(fieldText);
        } else if ("finetune-mixing".equals(tag)) {
            finetuneMixingField.setText(fieldText);
        }

    }

    private void writeNewMigBand() {
        migBandsStringBuilder.append(
                "BAND-START\n\t"
                + "source" + TAB + migBandsSourceList.getLast()
                + "\n\ttarget" + TAB + migBandsTargetList.getLast()
                + "\nBAND-END\n\n"
        );
        expectedMigBandsOutputTextArea.setText(migBandsStringBuilder.toString());
    }

    private void writeMigBands() {
        for (int i = 0; i < migBandsCounter; i++) {
            migBandsStringBuilder.append(
                    "BAND-START\n\t"
                    + "source" + TAB + migBandsSourceList.get(i)
                    + "\n\ttarget" + TAB + migBandsTargetList.get(i)
                    + "\nBAND-END\n\n"
            );
        }
        expectedMigBandsOutputTextArea.setText(migBandsStringBuilder.toString());
    }

    private void OpenWebManual(String urlString) {
        try {
            Desktop.getDesktop().browse(new URL(urlString).toURI());
        } catch (Exception e) {
    //        e.printStackTrace();
        }
    }

    private void openManual() {

        File fileToDelete = new File("GPhoCS_Manual.pdf");
        String manualPath = fileToDelete.getAbsolutePath();
        Desktop desktop = Desktop.getDesktop();
        try {
            desktop.open(new File(manualPath));
        } catch (IOException ex) {
            Logger.getLogger(ControlFileGeneratorUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Helper function to check invalid input for the tree on a basic level.
    private boolean validateTreeInput(String treeInput, StringBuilder errorString) {
        int len = treeInput.length();
        if (len == 0) {
            return false;
        }
        int counterOpen = 0;
        int counterClose = 0;
        int counterComma = 0;
        char curSign;
        char lastSign = treeInput.charAt(len - 1);
        if (lastSign == '(' || lastSign == ')' || lastSign == ',') {
            // Checks if the last sign is not a braket or a comma
            errorString.append("Last character can't be a braket or a comma");
            return true;
        }
        for (int i = 0; i < len; i++) {
            curSign = treeInput.charAt(i);
            if (curSign == '(') {
                counterOpen++;
            } else if (curSign == ')') {
                counterClose++;
            } else if (curSign == ',') {
                counterComma++;
            }

            // Checks if there are more closing brackets before open ones
            if (counterClose > counterOpen) {
                errorString.append("A closing bracket before an opened one.");

                return true;
            }
        }
        // Checks that the number of open brackets and closing brackets is equal
        if (counterOpen != counterClose) {
            errorString.append("Error: Check your brackets.");
            return true;
            // Checks that the number of commas is equal to the number of brackets
        } else if (counterOpen != counterComma) {
            errorString.append("Error: Check your commas.");
            return true;
        }

        return false;
    }

    // Helper function to check invalid input for the tree in deeper level.
    private boolean validateNewickTree(NewickTree nwtValidate, String treeInput) {
        int commaCounter = 0;

        for (int i = 0; i < treeInput.length(); i++) {
            char c = treeInput.charAt(i);
            if (c == ',') {
                commaCounter++;
            }
        }

        // Checking if the number of commas fits the given input
        if (commaCounter * 2 + 1 != nwtValidate.childArrayLen + nwtValidate.parentArrayLen) {
            return false;
        }

        return true;
    }

    // checking to see there are no duplications of the names of the pops
    private static boolean checkForDuplications(NewickTree nwtValidate) {
        for (int i = 0; i < nwtValidate.childArrayLen; i++) {
            for (int j = 0; j < nwtValidate.childArrayLen; j++) {
                if (nwtValidate.childArray[i].data.compareTo(nwtValidate.childArray[j].data) == 0 && i != j) {
                    return false;
                }
            }
            for (int j = 0; j < nwtValidate.parentArrayLen; j++) {
                if (nwtValidate.childArray[i].data.compareTo(nwtValidate.parentArray[j].data) == 0) {
                    return false;
                }
            }
        }

        for (int i = 0; i < nwtValidate.parentArrayLen; i++) {
            for (int j = 0; j < nwtValidate.childArrayLen; j++) {
                if (nwtValidate.parentArray[i].data.compareTo(nwtValidate.childArray[j].data) == 0) {
                    return false;
                }
            }
            for (int j = 0; j < nwtValidate.parentArrayLen; j++) {
                if (nwtValidate.parentArray[i].data.compareTo(nwtValidate.parentArray[j].data) == 0 && i != j) {
                    return false;
                }
            }
        }
        return true;
    }

    // Checking for empty names of pops
    private static boolean checkForEmptyNames(NewickTree nwtValidate) {
        for (int i = 0; i < nwtValidate.childArrayLen; i++) {
            if ("".equals(nwtValidate.childArray[i].data)) {
                return false;
            }
        }
        for (int i = 0; i < nwtValidate.parentArrayLen; i++) {
            if ("".equals(nwtValidate.parentArray[i].data)) {
                return false;
            }
        }
        return true;
    }

    // Checks there is no whitespace in one of the names
    private static boolean checkForWhiteSpace(NewickTree nwtValidate) {
        for (int i = 0; i < nwtValidate.childArrayLen; i++) {
            if (checkStringForWhiteSpace(nwtValidate.childArray[i].data)) {
                return false;
            }
        }

        for (int i = 0; i < nwtValidate.parentArrayLen; i++) {
            if (checkStringForWhiteSpace(nwtValidate.parentArray[i].data)) {
                return false;
            }
        }

        return true;
    }

    private static boolean checkStringForWhiteSpace(String s) {
        for (int i = 0; i < s.length(); i++) {
            if (Character.isWhitespace(s.charAt(i))) {
                return true;
            }
        }
        return false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ControlFileGeneratorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ControlFileGeneratorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ControlFileGeneratorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ControlFileGeneratorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ControlFileGeneratorUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CFGLoadButton;
    private javax.swing.JButton addNewMigBandButton;
    private javax.swing.JTextField burnInField;
    private javax.swing.JLabel burnInLabel;
    private javax.swing.JButton chooseDestinationFolderButton;
    private javax.swing.JButton chooseFixedFileButton;
    private javax.swing.JTextField chooseLocusMutRateFileField;
    private javax.swing.JLabel controlFileDestinationLabel;
    private javax.swing.JButton deleteMigBandsButton;
    private javax.swing.JTextField destinationFolderField;
    private javax.swing.JButton exitButton;
    private javax.swing.JTextArea expectedAncestralPOPsOutputTextArea;
    private javax.swing.JTextArea expectedCurrentPOPsOutputTextArea;
    private javax.swing.JTextArea expectedMigBandsOutputTextArea;
    private javax.swing.ButtonGroup findFinetunesButtonGroup;
    private javax.swing.JRadioButton findFinetunesFalseRadioButton;
    private javax.swing.JLabel findFinetunesLabel;
    private javax.swing.JTextField findFinetunesNumStepField;
    private javax.swing.JLabel findFinetunesNumStepLabel;
    private javax.swing.JTextField findFinetunesSamplesPerStepField;
    private javax.swing.JLabel findFinetunesSamplesPerStepLabel;
    private javax.swing.JRadioButton findFinetunesTrueRadioButton;
    private javax.swing.JTextField finetuneCoalTimeField;
    private javax.swing.JLabel finetuneCoalTimeLabel;
    private javax.swing.JTextField finetuneLocusRateField;
    private javax.swing.JLabel finetuneLocusRateLabel;
    private javax.swing.JTextField finetuneMigRateField;
    private javax.swing.JLabel finetuneMigRateLabel;
    private javax.swing.JTextField finetuneMigTimeField;
    private javax.swing.JLabel finetuneMigTimeLabel;
    private javax.swing.JTextField finetuneMixingField;
    private javax.swing.JLabel finetuneMixingLabel;
    private javax.swing.JTextField finetuneTauField;
    private javax.swing.JLabel finetuneTauLabel;
    private javax.swing.JTextField finetuneThetaField;
    private javax.swing.JLabel finetuneThetaLabel;
    private javax.swing.JButton generateFileButton;
    private javax.swing.JButton generateTreeInputButton;
    private javax.swing.JTextField iterationsPerLogField;
    private javax.swing.JLabel iterationsPerLogLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JRadioButton locusConstRadioButton;
    private javax.swing.JRadioButton locusFixedRadioButton;
    private javax.swing.ButtonGroup locusMutRateButtonGroup;
    private javax.swing.JLabel locusMutRateLabel;
    private javax.swing.JRadioButton locusVarRadioButton;
    private javax.swing.JTextField logsPerLineField;
    private javax.swing.JLabel logsPerLineLabel;
    private javax.swing.JTextField mcmcIterationsField;
    private javax.swing.JLabel mcmcIterationsLabel;
    private javax.swing.JTextField mcmcSampleSkipField;
    private javax.swing.JLabel mcmcSampleSkipLabel;
    private javax.swing.JTextField migRateAlphaField;
    private javax.swing.JLabel migRateAlphaLabel;
    private javax.swing.JTextField migRateBetaField;
    private javax.swing.JLabel migRateBetaLabel;
    private javax.swing.JTextField migRatePrintField;
    private javax.swing.JLabel migRatePrintLabel;
    private javax.swing.JLabel mixingLable;
    private javax.swing.JCheckBox noMixingCheckBox;
    private javax.swing.JTextField numLociField;
    private javax.swing.JLabel numLociLabel;
    private javax.swing.JLabel openWebManualLabel;
    private javax.swing.JTextField randomSeedField;
    private javax.swing.JLabel randomSeedLabel;
    private javax.swing.JTextField seqFileField;
    private javax.swing.JLabel seqFileLabel;
    private javax.swing.JComboBox sourceMigBandComboBox;
    private javax.swing.JTextField startMigField;
    private javax.swing.JLabel startMigLabel;
    private javax.swing.JComboBox targetMigBandComboBox;
    private javax.swing.JTextField tauThetaAlphaField;
    private javax.swing.JLabel tauThetaAlphaLabel;
    private javax.swing.JTextField tauThetaBetaField;
    private javax.swing.JLabel tauThetaBetaLabel;
    private javax.swing.JTextField tauThetaPrintField;
    private javax.swing.JLabel thauThetaPrintLabel;
    private javax.swing.JTextField traceFileField;
    private javax.swing.JLabel traceFileLabel;
    private javax.swing.JTextField treeField;
    private javax.swing.JLabel treeLabel;
    private javax.swing.JButton updateSamplesButton;
    private javax.swing.JButton updateTauInitialsButton;
    // End of variables declaration//GEN-END:variables

    private boolean fixedFileChosen = false;
    private boolean fixedIsChosen = false;
    private boolean findFinetunesBool = true;
    private String fileName;
    private String destinationFolderName;
    private File parentDir;
    private File selectedFile;
    boolean treeError = false;
    final String TAB = "\t\t";
    final String RUNTIME_TREE_ERROR = "Errors in the Tree input:\n\nUse the validation button to check your Tree's input";
    NewickTree nwtCreate;
    BSTNode[] currentPopArray;
    BSTNode[] ancestralPopArray;
    String[] currentPopSamples;
    String[] adjustedCurrentPopSamples;
    String[] ancestralTauInitial;
    String[] hiploidDiploid;

    public static LinkedList<String> migBandsSourceList = new LinkedList<String>();
    public static LinkedList<String> migBandsTargetList = new LinkedList<String>();
    LinkedList migBandsIndexList = new LinkedList();
    int migBandsCounter = 0;

    StringBuilder migBandsStringBuilder = new StringBuilder();

    boolean popCurrentLegal = false;
    boolean popAncestralLegal = false;

    boolean firstTimeCreatingTree = true;

    public static LinkedList<String> samplesAll = new LinkedList<String>();

    public static ArrayList<String> currentPopsFromLoadedSettingsNAMES = new ArrayList<String>();
    public static ArrayList<ArrayList<String>> currentPopsFromLoadedSettingsSAMPLES = new ArrayList<ArrayList<String>>();

    public static ArrayList<String> ancestralPopsFromLoadedSettingsNAMES = new ArrayList<String>();
    public static ArrayList<ArrayList<String>> ancestralPopsFromLoadedSettingsCHILDREN = new ArrayList<ArrayList<String>>();
    public static ArrayList<String> ancestralPopsFromLoadedSettingsTAU = new ArrayList<String>();
    
    public static ArrayList<String> sorcesMigBandsFromLoadedSettingsNAMES = new ArrayList<String>();
    public static ArrayList<String> targetsMigBandsFromLoadedSettingsNAMES = new ArrayList<String>();
    
    File destFolder;

}
